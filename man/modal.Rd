% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/feedback.R
\name{modal}
\alias{modal}
\alias{modal_header}
\alias{modal_body}
\alias{modal_footer}
\title{modal}
\usage{
modal(...)

modal_header(...)

modal_body(...)

modal_footer(...)
}
\arguments{
\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
}
\description{
Displays a dialog with a custom content that requires attention or provides additional information.
}
\details{
\enumerate{
\item Modal Props
\itemize{
\item \bold{open}. Determine if the modal is visible or hidden. Type: boolean. Default: false.
\item \bold{scroll}. Makes the content a maximum high and gives the possibility to overflow the content add scroll. Type: boolean. Default: false.
\item \bold{blur}. Makes all elements blur when the modal opens. Type: boolean. Default: false.
\item \bold{animated}. Display the modal with opening and close animation. Type: boolean. Default: true.
\item \bold{noPadding}. Eliminates the padding of the base elements of the modal. Type: boolean. Default: false.
\item \bold{closeButton}. Determine if the modal close button is visible or hidden. Type: boolean. Default: false.
\item \bold{fullScreen}. Makes the modal the size of the window. Type: boolean. Default: false.
\item \bold{autoMargin}. Apply or not a margin to the base elements of the modal. Type: boolean. Default: NA.
\item \bold{preventClose}. Modal cannot be closed by clicking outside or by pressing the esc key. Type: boolean. Default: false.
\item \bold{width}. Determine the width of the modal. Type: string number. Default: 400px.
\item \bold{onClose}. Callback fired when the modal is closed. Type: () => void. Default: NA.
\item \bold{onOpen}. Callback fired when the modal is open. Type: () => void. Default: NA.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: section.
\item \bold{...}. Native props. Type: HTMLAttributes. Default: NA.
}
\item Modal.Header Props
\itemize{
\item \bold{autoMargin}. Apply or not a margin to the base elements of the modal. Type: boolean. Default: true.
\item \bold{justify}. CSS "justify-content" property. Type: Justify. Default: center.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: div.
\item \bold{...}. Native props. Type: HTMLAttributes. Default: NA.
}
\item Modal.Body Props
\itemize{
\item \bold{autoMargin}. Apply or not a margin to the base elements of the modal. Type: boolean. Default: true.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: div.
\item \bold{...}. Native props. Type: HTMLAttributes. Default: NA.
}
\item Modal.Footer Props
\itemize{
\item \bold{autoMargin}. Apply or not a margin to the base elements of the modal. Type: boolean. Default: true.
\item \bold{justify}. CSS "justify-content" property. Type: Justify. Default: flex-end.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: div.
\item \bold{...}. Native props. Type: HTMLAttributes. Default: NA.
}
}
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)

ui <- nextui_page(
  action_button(
    inputId = "show_modal",
    color = "primary",
    shadow = TRUE,
    "Show modal"
  ),
  reactOutput("modal")
)

server <- function(input, output, session) {
  modalVisible <- reactiveVal(FALSE)
  observeEvent(input$show_modal, {
    modalVisible(TRUE)
  })

  observeEvent(input$modal_closed, {
    modalVisible(FALSE)
  })

  output$modal <- renderReact({
    modal(
      open = modalVisible(),
      modal_header("My modal"),
      modal_body(
        text(
          "Cras mattis consectetur purus sit amet fermentum. Cras justo odio,
            dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta
            ac consectetur ac, vestibulum at eros."
        )
      ),
      modal_footer("Modal footer"),
      onClose = JS("() => Shiny.setInputValue('modal_closed', true, {priority: 'event'})")
    )
  })

  exportTestValues(
    modal_state = modalVisible()
  )
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/modal}.
}
