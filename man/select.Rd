% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{select}
\alias{select}
\alias{select_input}
\alias{select_section}
\alias{select_item}
\alias{update_select_input}
\title{select}
\usage{
select_input(inputId, ..., value = default_value)

select_section(...)

select_item(...)

update_select_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
A select displays a collapsible list of options and allows a user to select one or more of them.

A select displays a collapsible list of options and allows a user to select one or more of them.
}
\details{
\enumerate{
\item Select Props
\itemize{
\item \bold{children*}. The children to render. Usually a list of SelectItem and SelectSection elements.. Type: ReactNode[]. Default: NA.
\item \bold{items}. Item objects in the select. (dynamic). Type: Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{selectionMode}. The type of selection that is allowed in the collection.. Type: single | multiple. Default: NA.
\item \bold{selectedKeys}. The currently selected keys in the collection (controlled).. Type: all | React.Key[]. Default: NA.
\item \bold{disabledKeys}. The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.. Type: all | React.Key[]. Default: NA.
\item \bold{defaultSelectedKeys}. The initial selected keys in the collection (uncontrolled).. Type: all | React.Key[]. Default: NA.
\item \bold{variant}. The variant of the select.. Type: flat | bordered | faded | underlined. Default: flat.
\item \bold{color}. The color of the select.. Type: default | primary | secondary | success | warning | danger. Default: default.
\item \bold{size}. The size of the select.. Type: sm | md | lg. Default: md.
\item \bold{radius}. The radius of the select.. Type: none | sm | md | lg | full. Default: NA.
\item \bold{placeholder}. The placeholder of the select.. Type: string. Default: Select an option.
\item \bold{labelPlacement}. The position of the label.. Type: inside | outside | outside-left. Default: inside.
\item \bold{label}. The content to display as the label.. Type: ReactNode. Default: NA.
\item \bold{description}. A description for the select. Provides a hint such as specific requirements for what to choose.. Type: ReactNode. Default: NA.
\item \bold{errorMessage}. An error message for the select.. Type: ReactNode. Default: NA.
\item \bold{startContent}. Element to be rendered in the left side of the select.. Type: ReactNode. Default: NA.
\item \bold{endContent}. Element to be rendered in the right side of the select.. Type: ReactNode. Default: NA.
\item \bold{selectorIcon}. Element to be rendered as the selector icon.. Type: ReactNode. Default: NA.
\item \bold{scrollRef}. A ref to the scrollable element.. Type: React.RefObject\if{html}{\out{<HTMLElement>}}. Default: NA.
\item \bold{spinnerRef}. A ref to the spinner element.. Type: React.RefObject\if{html}{\out{<HTMLElement>}}. Default: NA.
\item \bold{fullWidth}. Whether the select should take up the width of its parent.. Type: boolean. Default: true.
\item \bold{isOpen}. Whether the select is open by default (controlled).. Type: boolean. Default: NA.
\item \bold{defaultOpen}. Whether the select is open by default (uncontrolled).. Type: boolean. Default: NA.
\item \bold{isRequired}. Whether user select is required on the select before form submission.. Type: boolean. Default: false.
\item \bold{isDisabled}. Whether the select is disabled.. Type: boolean. Default: false.
\item \bold{isMultiline}. Whether the select should allow multiple lines of text.. Type: boolean. Default: false.
\item \bold{isInvalid}. Whether the select is invalid.. Type: boolean. Default: false.
\item \bold{validationState}. Whether the select should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid instead.. Type: valid | invalid. Default: NA.
\item \bold{showScrollIndicators}. Whether the select should show scroll indicators when the listbox is scrollable.. Type: boolean. Default: true.
\item \bold{autoFocus}. Whether the select should be focused on the first mount.. Type: boolean. Default: false.
\item \bold{disallowEmptySelection}. Whether the collection allows empty selection.. Type: boolean. Default: false.
\item \bold{disableAnimation}. Whether the select should be animated.. Type: boolean. Default: true.
\item \bold{disableSelectorIconRotation}. Whether the select should disable the rotation of the selector icon.. Type: boolean. Default: false.
\item \bold{popoverProps}. Props to be passed to the popover component.. Type: PopoverProps. Default: NA.
\item \bold{listboxProps}. Props to be passed to the listbox component.. Type: ListboxProps. Default: NA.
\item \bold{scrollShadowProps}. Props to be passed to the scroll shadow component.. Type: ScrollShadowProps. Default: NA.
\item \bold{classNames}. Allows to set custom class names for the Select slots.. Type: Record<"base"｜ "label"｜ "trigger"｜ "mainWrapper" ｜ "innerWrapper"｜ "selectorIcon" ｜ "value" ｜ "listboxWrapper"｜ "listbox" ｜ "popoverContent" ｜ "helperWrapper" ｜ "description" ｜ "errorMessage", string>. Default: NA.
}
\item Select Events
\itemize{
\item \bold{onClose}. Callback fired when the select popover is closed.. Type: () => void. Default: NA.
\item \bold{onOpenChange}. Callback fired when the select popover is opened or closed.. Type: (isOpen: boolean) => void. Default: NA.
\item \bold{onSelectionChange}. Callback fired when the selected keys change.. Type: (keys: React.Key[]) => void. Default: NA.
\item \bold{onChange}. Native select change event, fired when the selected value changes.. Type: React.ChangeEvent\if{html}{\out{<HTMLSelectElement>}}. Default: NA.
\item \bold{renderValue}. Function to render the value of the select. It renders the selected item by default.. Type: RenderValueFunction. Default: NA.
}
}

\enumerate{
\item Select Props
\itemize{
\item \bold{children*}. Type: ReactNode[]. Default: .
\item \bold{items}. Type: Iterable\if{html}{\out{<T>}}. Default: .
\item \bold{selectionMode}. Type: single | multiple. Default: .
\item \bold{selectedKeys}. Type: all | Iterable<React.Key>. Default: .
\item \bold{disabledKeys}. Type: Iterable<React.Key>. Default: .
\item \bold{defaultSelectedKeys}. Type: all | Iterable<React.Key>. Default: .
\item \bold{variant}. Type: flat | bordered | faded | underlined. Default: "flat".
\item \bold{color}. Type: default | primary | secondary | success | warning | danger. Default: "default".
\item \bold{size}. Type: sm | md | lg. Default: "md".
\item \bold{radius}. Type: none | sm | md | lg | full. Default: .
\item \bold{placeholder}. Type: string. Default: "Select an option".
\item \bold{labelPlacement}. Type: inside | outside | outside-left. Default: "inside".
\item \bold{label}. Type: ReactNode. Default: .
\item \bold{description}. Type: ReactNode. Default: .
\item \bold{errorMessage}. Type: ReactNode | ((v: ValidationResult) => ReactNode). Default: .
\item \bold{startContent}. Type: ReactNode. Default: .
\item \bold{endContent}. Type: ReactNode. Default: .
\item \bold{selectorIcon}. Type: ReactNode. Default: .
\item \bold{scrollRef}. Type: React.RefObject\if{html}{\out{<HTMLElement>}}. Default: .
\item \bold{spinnerRef}. Type: React.RefObject\if{html}{\out{<HTMLElement>}}. Default: .
\item \bold{maxListboxHeight}. Type: number. Default: "256".
\item \bold{itemHeight}. Type: number. Default: "32".
\item \bold{isVirtualized}. Type: boolean. Default: "undefined".
\item \bold{fullWidth}. Type: boolean. Default: true.
\item \bold{isOpen}. Type: boolean. Default: .
\item \bold{defaultOpen}. Type: boolean. Default: .
\item \bold{isRequired}. Type: boolean. Default: false.
\item \bold{isDisabled}. Type: boolean. Default: false.
\item \bold{isMultiline}. Type: boolean. Default: false.
\item \bold{isInvalid}. Type: boolean. Default: false.
\item \bold{validationState}. Type: valid | invalid. Default: .
\item \bold{showScrollIndicators}. Type: boolean. Default: true.
\item \bold{autoFocus}. Type: boolean. Default: false.
\item \bold{disallowEmptySelection}. Type: boolean. Default: false.
\item \bold{disableAnimation}. Type: boolean. Default: true.
\item \bold{disableSelectorIconRotation}. Type: boolean. Default: false.
\item \bold{hideEmptyContent}. Type: boolean. Default: false.
\item \bold{popoverProps}. Type: PopoverProps. Default: .
\item \bold{listboxProps}. Type: ListboxProps. Default: .
\item \bold{scrollShadowProps}. Type: ScrollShadowProps. Default: .
\item \bold{classNames}. Type: Partial<Record<"base"｜ "label"｜ "trigger"｜ "mainWrapper" ｜ "innerWrapper"｜ "selectorIcon" ｜ "value" ｜ "listboxWrapper"｜ "listbox" ｜ "popoverContent" ｜ "helperWrapper" ｜ "description" ｜ "errorMessage", string>>. Default: .
}
\item Select Events
\itemize{
\item \bold{onClose}. Type: () => void. Default: NA.
\item \bold{onOpenChange}. Type: (isOpen: boolean) => void. Default: NA.
\item \bold{onSelectionChange}. Type: (keys: "all" | Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void. Default: NA.
\item \bold{onChange}. Type: React.ChangeEvent\if{html}{\out{<HTMLSelectElement>}}. Default: NA.
\item \bold{renderValue}. Type: RenderValueFunction. Default: NA.
}
}
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)

animals <- list(
  list(
    label = "Bulbasaur",
    value = "bulbasaur",
    description = "Blabla",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png"
  ),
  list(
    label = "Pikachu",
    value = "pikachu",
    description = "Electric mouse",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png"
  )
)

select_items <- lapply(animals, function(animal) {
  select_item(
    key = animal[["value"]],
    value = animal[["value"]],
    startContent = avatar(src = animal[["avatar"]]),
    animal[["label"]]
  )
})

label_placements <- c(
  "inside",
  "outside",
  "outside-left"
)

ui <- nextui_page(
  debug_react = TRUE,
  p(class = "font-extrabold text-2xl uppercase", "Basic select"),
  action_button("update", "Update to bulbasaur?"),
  spacer(y = 2),
  action_button("toggle", "Open select"),
  spacer(y = 2),
  select_input(
    inputId = "select",
    label = "Select an pokemon",
    value = JS("['pikachu']"),
    selectionMode = "multiple",
    description = "This is a select input. You can select multiple values.",
    select_items
  ),
  textOutput("select_val"),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Variants"),
  lapply(select_variants, function(variant) {
    tagList(
      select_input(
        inputId = sprintf("select-\%s", variant),
        label = "Select a pokemon",
        variant = variant,
        value = JS("['pikachu']"),
        description = sprintf("This is a select input with \%s variant style", variant),
        select_items
      ),
      spacer(y = 2)
    )
  }),
  spacer(y = 5),
  divider(),
  p(
    class = "font-extrabold text-2xl uppercase",
    "Label placement and validation (no value specified)"
  ),
  lapply(label_placements, function(placement) {
    tagList(
      select_input(
        inputId = sprintf("select-\%s", placement),
        label = "Select a pokemon",
        labelPlacement = placement,
        description = sprintf("This is a select input with \%s label placement", placement),
        select_items
      ),
      spacer(y = 10)
    )
  }),
  spacer(y = 5),
  divider(),
  p(
    class = "font-extrabold text-2xl uppercase",
    "Custom render value"
  ),
  select_input(
    inputId = "customselect",
    labelPlacement = "outside-left",
    label = "Pokemon",
    description = "This is a select input. You can select multiple values.",
    items = jsonlite::toJSON(animals),
    select_items
  )
)

server <- function(input, output, session) {
  opened <- reactiveVal(FALSE)
  observeEvent(input$update, {
    update_select_input(session, "select", value = JS("['bulbasaur']"))
  })
  observeEvent(input$toggle, {
    opened(!opened())
    update_select_input(session, "select", isOpen = opened())
  })
  output$select_val <- renderText(input$select)
}

if (interactive() || is_testing()) shinyApp(ui, server)
library(shiny)
library(shinyNextUI)
library(shiny.react)

animals <- list(
  list(
    label = "Bulbasaur",
    value = "bulbasaur",
    description = "Blabla",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png"
  ),
  list(
    label = "Pikachu",
    value = "pikachu",
    description = "Electric mouse",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png"
  )
)

select_items <- lapply(animals, function(animal) {
  select_item(
    key = animal[["value"]],
    value = animal[["value"]],
    startContent = avatar(src = animal[["avatar"]]),
    animal[["label"]]
  )
})

label_placements <- c(
  "inside",
  "outside",
  "outside-left"
)

ui <- nextui_page(
  debug_react = TRUE,
  p(class = "font-extrabold text-2xl uppercase", "Basic select"),
  action_button("update", "Update to bulbasaur?"),
  spacer(y = 2),
  action_button("toggle", "Open select"),
  spacer(y = 2),
  select_input(
    inputId = "select",
    label = "Select an pokemon",
    value = JS("['pikachu']"),
    selectionMode = "multiple",
    description = "This is a select input. You can select multiple values.",
    select_items
  ),
  textOutput("select_val"),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Variants"),
  lapply(select_variants, function(variant) {
    tagList(
      select_input(
        inputId = sprintf("select-\%s", variant),
        label = "Select a pokemon",
        variant = variant,
        value = JS("['pikachu']"),
        description = sprintf("This is a select input with \%s variant style", variant),
        select_items
      ),
      spacer(y = 2)
    )
  }),
  spacer(y = 5),
  divider(),
  p(
    class = "font-extrabold text-2xl uppercase",
    "Label placement and validation (no value specified)"
  ),
  lapply(label_placements, function(placement) {
    tagList(
      select_input(
        inputId = sprintf("select-\%s", placement),
        label = "Select a pokemon",
        labelPlacement = placement,
        description = sprintf("This is a select input with \%s label placement", placement),
        select_items
      ),
      spacer(y = 10)
    )
  }),
  spacer(y = 5),
  divider(),
  p(
    class = "font-extrabold text-2xl uppercase",
    "Custom render value"
  ),
  select_input(
    inputId = "customselect",
    labelPlacement = "outside-left",
    label = "Pokemon",
    description = "This is a select input. You can select multiple values.",
    items = jsonlite::toJSON(animals),
    select_items
  )
)

server <- function(input, output, session) {
  opened <- reactiveVal(FALSE)
  observeEvent(input$update, {
    update_select_input(session, "select", value = JS("['bulbasaur']"))
  })
  observeEvent(input$toggle, {
    opened(!opened())
    update_select_input(session, "select", isOpen = opened())
  })
  output$select_val <- renderText(input$select)
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/select}.

See \url{https://nextui.org/docs/components/select}.
}
