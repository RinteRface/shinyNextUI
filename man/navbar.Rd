% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/layout.R
\name{navbar}
\alias{navbar}
\alias{navbar_brand}
\alias{navbar_content}
\alias{navbar_item}
\alias{navbar_toggle}
\title{navbar}
\usage{
navbar(...)

navbar_brand(...)

navbar_content(...)

navbar_item(...)

navbar_toggle(...)
}
\arguments{
\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
}
\description{
A responsive navigation header positioned on top side of your page that includes support for branding, links, navigation, collapse and more.
}
\details{
\enumerate{
\item Navbar Props
\itemize{
\item \bold{children*}. The content of the navbar. It's usually the brand, content, toggle and collapse.. Type: ReactNode ReactNode[]. Default: NA.
\item \bold{parentRef}. The parent element where the navbar is placed within. This is used to determine the scroll position and whether the navbar should be hidden or not.. Type: RefObject\if{html}{\out{<HTMLElement>}}. Default: window.
\item \bold{variant}. The navbar positions variantions.. Type: NavbarVariants. Default: static.
\item \bold{height}. The height of the navbar. When the navbar is compacted (isCompact=true) the height is reduced to 54px.. Type: number string. Default: 76px.
\item \bold{maxWidth}. The navbar maximum width.. Type: NavbarMaxWidth. Default: lg.
\item \bold{isBordered}. Whether the navbar should be bordered.. Type: boolean. Default: false.
\item \bold{isCompact}. Whether the navbar should be compact. It reduces the height to 54px.. Type: boolean. Default: false.
\item \bold{borderWeight}. The border weight of the bordered navbar.. Type: NormalWeights. Default: light.
\item \bold{shouldHideOnScroll}. Whether the navbar should hide on scroll or not.. Type: boolean. Default: false.
\item \bold{disableShadow}. Whether the navbar should have a shadow or not.. Type: boolean. Default: false.
\item \bold{disableBlur}. Whether the navbar should be blurred or not. (only supported by this browser list. Type: boolean. Default: false.
\item \bold{disableScrollHandler}. Whether the navbar parent scroll event should be listened to or not.. Type: boolean. Default: false.
\item \bold{containerCss}. The css object of the navbar container.. Type: Stitches.CSS. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: nav.
}
\item Navbar Events
\itemize{
\item \bold{onScrollPositionChange}. The scroll event handler for the navbar. The event fires when the navbar parent element is scrolled. it only works if disableScrollHandler is set to false or shouldHideOnScroll is set to true.. Type: (scrollPosition: number) => void. Default: NA.
}
\item Navbar.Brand Props
\itemize{
\item \bold{children}. The content of the navbar brand. It's usually the logo and name of the brand.. Type: ReactNode ReactNode[]. Default: NA.
\item \bold{hideIn}. Sets the breakpoint from where the component should start hiding.. Type: HideShowIn. Default: NA.
\item \bold{showIn}. Sets the breakpoint from where the component should start displaying.. Type: HideShowIn. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: span.
}
\item Navbar.Content Props
\itemize{
\item \bold{children}. The content of the navbar content. It's usually the navbar item and navbar link.. Type: ReactNode ReactNode[]. Default: NA.
\item \bold{variant}. The variant of the navbar content items.. Type: NavbarContentVariants. Default: default.
\item \bold{gap}. The gap between each content item. It's 0px for highlight variants.. Type: number string CSSGapUnit. Default: $10.
\item \bold{activeColor}. The active color of the navbar content items.. Type: SimpleColors. Default: default (link).
\item \bold{underlineHeight}. The height of the navbar content items's underline.. Type: NormalWeights. Default: normal.
\item \bold{enableCursorHighlight}. Whether the navbar content highlighted cursor should be visible.. Type: NormalWeights. Default: false.
\item \bold{isCursorHighlightRounded}. Whether the navbar content highlighted cursor should be rounded.. Type: NormalWeights. Default: false.
\item \bold{hideIn}. Sets the breakpoint from where the component should start hiding.. Type: HideShowIn. Default: NA.
\item \bold{showIn}. Sets the breakpoint from where the component should start displaying.. Type: HideShowIn. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: ul.
}
\item Navbar.Item Props
\itemize{
\item \bold{children*}. The contents of the navbar item.. Type: ReactNode. Default: NA.
\item \bold{variant}. The variant of the navbar item.. Type: NavbarContentVariants. Default: default.
\item \bold{activeColor}. The active color of the navbar item.. Type: SimpleColors. Default: default (link).
\item \bold{underlineHeight}. The height of the navbar item underline.. Type: NormalWeights. Default: normal.
\item \bold{isActive}. Whether navbar item is active.. Type: boolean. Default: false.
\item \bold{isDisabled}. Whether navbar item is disabled.. Type: boolean. Default: false.
\item \bold{hideIn}. Sets the breakpoint from where the component should start hiding.. Type: HideShowIn. Default: NA.
\item \bold{showIn}. Sets the breakpoint from where the component should start displaying.. Type: HideShowIn. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: li.
}
\item Navbar.Link Props
\itemize{
\item \bold{ItemProps}. Since dropdown navbar link is based on the Navbar.Item component you can use any of the Navbar.Item props.. Type: NavbarItemProps. Default: NA.
\item \bold{LinkProps}. Since dropdown navbar link uses the Link component as a base, you can use any of the Link props.. Type: LinkProps. Default: NA.
\item \bold{itemCss}. Override the navbar item CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{itemClassName}. Add a class name to the navbar item.. Type: string. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: a.
}
\item Navbar.Toggle Props
\itemize{
\item \bold{children}. The contents of the navbar toggle. It's usually an hamburguer icon button.. Type: ReactNode. Default: NA.
\item \bold{isSelected}. Whether the element should be selected (controlled).. Type: HideShowIn. Default: false.
\item \bold{defaultSelected}. Whether the element should be selected (uncontrolled).. Type: HideShowIn. Default: NA.
\item \bold{autoFocus}. Whether the element should receive focus on render.. Type: HideShowIn. Default: false.
\item \bold{hideIn}. Sets the breakpoint from where the component should start hiding.. Type: HideShowIn. Default: NA.
\item \bold{showIn}. Sets the breakpoint from where the component should start displaying.. Type: HideShowIn. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: button.
}
\item Navbar.Toggle Events
\itemize{
\item \bold{onChange}. Handler that is called when the element's selection state changes.. Type: (isSelected: boolean) => void. Default: NA.
}
\item Navbar.Toggle Accessibility Props
\itemize{
\item \bold{id}. The element's unique identifier. See MDN. Type: string. Default: NA.
\item \bold{aria-label}. Defines a string value that labels the current element. Type: string. Default: NA.
}
\item Navbar.Collapse Props
\itemize{
\item \bold{children}. The contents of the navbar toggle. It's usually an hamburguer icon button.. Type: ReactNode ReactNode[]. Default: NA.
\item \bold{transitionDelay}. The delay of all collapse items transition. (milliseconds). Type: number. Default: 0.
\item \bold{transitionTime}. The delay of all collapse items transition. (milliseconds). Type: number. Default: 450.
\item \bold{transitionMatrix}. The matrix of all collapse items transition.. Type: CollapseTransitionMatrix. Default: {in: "matrix(1, 0, 0, 1, 0, 0)", out: "matrix(0.97, 0, 0, 1, 0, 20)"}.
\item \bold{disableAnimation}. Whether the all navbar collapse items are animated.. Type: boolean. Default: false.
\item \bold{hideIn}. Sets the breakpoint from where the component should start hiding.. Type: HideShowIn. Default: NA.
\item \bold{showIn}. Sets the breakpoint from where the component should start displaying.. Type: HideShowIn. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: ul.
}
\item Navbar.Collapse Accessibility Props
\itemize{
\item \bold{id}. The element's unique identifier. See MDN. Type: string. Default: NA.
\item \bold{aria-labelledby}. Identifies the element (or elements) that labels the current element. Type: string. Default: NA.
\item \bold{aria-describedby}. Identifies the element (or elements) that describes the object.. Type: string. Default: NA.
}
\item Navbar.CollapseItem Props
\itemize{
\item \bold{children}. The contents of the navbar toggle. It's usually an hamburguer icon button.. Type: ReactNode ReactNode[]. Default: NA.
\item \bold{transitionDelay}. The delay of all collapse items transition. (milliseconds). Type: number. Default: 0.
\item \bold{transitionTime}. The delay of all collapse items transition. (milliseconds). Type: number. Default: 450.
\item \bold{transitionMatrix}. The matrix of all collapse items transition.. Type: CollapseTransitionMatrix. Default: {in: "matrix(1, 0, 0, 1, 0, 0)", out: "matrix(0.97, 0, 0, 1, 0, 20)"}.
\item \bold{disableAnimation}. Whether the navbar collapse item is animated.. Type: boolean. Default: false.
\item \bold{hideIn}. Sets the breakpoint from where the component should start hiding.. Type: HideShowIn. Default: NA.
\item \bold{showIn}. Sets the breakpoint from where the component should start displaying.. Type: HideShowIn. Default: NA.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: li.
}
}
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)
library(shiny.router)

sections <- c("main", "other")

layout <- function(..., content) {
  tags$div(
    css = JS("
      {
        maxW: '100\%',
        boxSizing: 'border-box',
      }"
    ),
    ..., # Navbar
    # Content
    tags$div(
      css = JS(
        "{
          boxSizing: 'border-box',
          px: '$12',
          mt: '$8',
          '@xsMax': {px: '$10'}
        }"
      ),
      content
    )
  )
}

# TO DO: create wrapper for enduser to simplify all this mess.
create_navbar <- function(id) {

  input <- get("input", envir = parent.frame())

  nav_links <- lapply(seq_along(sections), function(i) {
    # Li elements
    navbar_link(
      inputId = sprintf("link_\%s", i),
      href = route_link(sections[[i]]),
      key = i,
      value = i,
      parent = sprintf("navbar_\%s", sections[[i]]),
      isActive = if (is.null(input[[sprintf("navbar_\%s", id)]])) {
        if (i == 1) TRUE else FALSE
      } else {
        if (input[[sprintf("navbar_\%s", id)]] == i) TRUE else FALSE
      },
      sprintf("Link to \%s", sections[[i]])
    )
  })

  nav <- navbar(
    id = sprintf("navbar_\%s", id),
    maxWidth = "lg",
    variant = "floating",
    isBordered = TRUE,
    navbar_brand(text(b = TRUE, "Brand", color = "inherit", hideIn = "xs")),
    # Ul element
    navbar_content(
      variant = "highlight",
      activeColor = "success",
      nav_links,
      navbar_item(
        action_button(
          inputId = sprintf("navbar_button-\%s", id),
          "Click me",
          auto = TRUE,
          flat = TRUE
        )
      )
    )
  )

  if (is.null(input[[sprintf("navbar_\%s", id)]])) {
    tagList(
      tags$script(
        sprintf("Shiny.setInputValue('navbar_\%s', 0)", id)
      ),
      nav
    )
  } else {
    nav
  }
}

page <- function(id, content) {
  layout(
    reactOutput(sprintf("nav_\%s", id)),
    content = content
  )
}

home <- page(
  id = "main",
  grid_container(
    gap = 2,
    grid(
      xs = 12,
      card(
        variant = "bordered",
        card_header(text("Amazing plot", as = "h3")),
        card_divider(),
        card_body(
          row(
            justify = "center",
            align = "center",
            gap = 1,
            col(
              span = 2,
              collapse_panel(
                shadow = TRUE,
                bordered = TRUE,
                css = JS("{
                  background: 'gainsboro'
                }"),
                title = "Plot options",
                subtitle = "A panel containing options",
                inputId = "options",
                value = TRUE,
                numeric_input(
                  inputId = "obs",
                  label = "Number of observations:",
                  value = 500
                )
              )
            ),
            col(
              span = 10,
              plotOutput("distPlot")
            )
          )
        )
      )
    )
  )
)
other <- page(
  id = "other",
  grid_container(
    gap = 2,
    grid(
      xs = 12,
      card(
        css = JS(
          "{
           maxHeight: '400px',
          overflowY: 'scroll'
          }"
        ),
        variant = "bordered",
        tableOutput('table')
      )
    )
  )
)

ui <- nextui_page(
  router_ui(
    route("main", home),
    route("other", other)
  )
)

server <- function(input, output, session) {
  observe(print(input$navbar))
  output$nav_main <- renderReact({
    create_navbar("main")
  })

  output$nav_other <- renderReact({
    create_navbar("other")
  })

  output$distPlot <- renderPlot({
    hist(rnorm(input$obs))
  })
  output$table <- renderTable(iris)

  router_server("main")
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/navbar}.
}
