% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{slider}
\alias{slider}
\alias{slider_input}
\alias{update_slider_input}
\title{slider}
\usage{
slider_input(inputId, ..., value = default_value)

update_slider_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
A slider allows a user to select one or more values within a range.
}
\details{
\itemize{
\item \bold{label}. Type: \code{ReactNode}. Default: NA.
\item \bold{name}. Type: \code{string}. Default: NA.
\item \bold{size}. Type: \code{sm | md | lg}. Default: "md".
\item \bold{color}. Type: \code{foreground | primary | secondary | success | warning | danger}. Default: "primary".
\item \bold{radius}. Type: \code{none | sm | md | lg | full}. Default: "full".
\item \bold{step}. Type: \code{number}. Default: "1".
\item \bold{value}. Type: \code{number}. Default: NA.
\item \bold{defaultValue}. Type: \code{number}. Default: NA.
\item \bold{minValue}. Type: \code{number}. Default: "0".
\item \bold{maxValue}. Type: \code{number}. Default: "100".
\item \bold{orientation}. Type: \code{horizontal | vertical}. Default: "horizontal".
\item \bold{fillOffset}. Type: \code{number}. Default: NA.
\item \bold{showSteps}. Type: \code{boolean}. Default: false.
\item \bold{showTooltip}. Type: \code{boolean}. Default: false.
\item \bold{marks}. Type: \code{SliderStepMarks}. Default: NA.
\item \bold{startContent}. Type: \code{ReactNode}. Default: NA.
\item \bold{endContent}. Type: \code{ReactNode}. Default: NA.
\item \bold{formatOptions}. Type: \code{Intl.NumberFormat}. Default: NA.
\item \bold{tooltipValueFormatOptions}. Type: \code{Intl.NumberFormat}. Default: NA.
\item \bold{tooltipProps}. Type: \code{TooltipProps}. Default: NA.
\item \bold{showOutline}. Type: \code{boolean}. Default: false.
\item \bold{hideValue}. Type: \code{boolean}. Default: false.
\item \bold{hideThumb}. Type: \code{boolean}. Default: false.
\item \bold{disableThumbScale}. Type: \code{boolean}. Default: false.
\item \bold{isDisabled}. Type: \code{boolean}. Default: false.
\item \bold{disableAnimation}. Type: \code{boolean}. Default: false.
}
\itemize{
\item \bold{getValue}. Type: \code{(value: SliderValue) => string}. Default: NA.
\item \bold{renderLabel}. Type: \code{(props: DOMAttributes<HTMLLabelElement>) => ReactNode}. Default: NA.
\item \bold{renderValue}. Type: \code{(props: DOMAttributes<HTMLOutputElement>) => ReactNode}. Default: NA.
\item \bold{renderThumb}. Type: \code{(props: DOMAttributes<HTMLDivElement> & {index?: number}) => ReactNode}. Default: NA.
}
\itemize{
\item \bold{onChange}. Type: \code{(value: SliderValue) => void}. Default: NA.
\item \bold{onChangeEnd}. Type: \code{(value: SliderValue) => void}. Default: NA.
}
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)

ui <- nextui_page(
  debug_react = TRUE,
  action_button("update", "Update slider 1"),
  slider_input(
    "slider",
    label = "My slider",
    showTooltip = TRUE,
    radius = "none",
    step = 1,
    maxValue = 10,
    minValue = 0,
    value = 5,
    className = "max-w-md",
    showSteps = TRUE,
    color = "foreground",
    size = "sm",
    marks = JS(
      "
      [
        {
          value: 2,
          label: 'First mark',
        },
        {
          value: 5,
          label: 'Second mark',
        },
        {
          value: 8,
          label: 'Third mark',
        },
      ]
    "
    )
  ),
  spacer(y = 10),
  slider_input(
    "slider2",
    radius = "lg",
    label = "Color offset",
    size = "sm",
    showTooltip = TRUE,
    color = "warning",
    maxValue = 5,
    minValue = -5,
    fillOffset = 0,
    value = 1,
    formatOptions = JS("{signDisplay: 'always'}")
  ),
  spacer(y = 10),
  slider_input(
    "slider3",
    label = "Outline",
    color = "foreground",
    showOutline = TRUE,
    minValue = 0,
    maxValue = 10,
    value = 5
  ),
  spacer(y = 10),
  slider_input(
    "slider4",
    label = "With start and end content",
    minValue = 0,
    maxValue = 10,
    value = 5,
    startContent = icon("volume-xmark"),
    endContent = icon("volume-high")
  ),
  spacer(y = 10),
  slider_input(
    "slider5",
    color = "success",
    step = 0.1,
    label = "Format value with getValue",
    getValue = JS("(val) => `${val} / 10`"),
    maxValue = 10,
    minValue = 0,
    value = 5
  ),
  spacer(y = 10),
  slider_input(
    "range",
    label = "Range",
    color = "danger",
    minValue = 0,
    maxValue = 10,
    value = c(1, 4)
  ),
  spacer(y = 10),
  div(
    class = "flex flex-row  max-w-md h-[348px] gap-6 w-full",
    slider_input(
      "slider4",
      label = "Vertical",
      size = "sm",
      orientation = "vertical",
      minValue = 0,
      maxValue = 10,
      value = 5,
      startContent = icon("volume-high"),
      endContent = icon("volume-xmark")
    )
  )
)

server <- function(input, output, session) {
  observeEvent(input$update, {
    update_slider_input(session, inputId = "slider", value = 10)
  })

  observeEvent(input$slider, {
    print(class(input$slider))
    print(sprintf("Slider is: \%s", input$slider))
  })
  observeEvent(input$range, {
    print(input$range)
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/slider}.
}
