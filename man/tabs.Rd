% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{tabs}
\alias{tabs}
\alias{update_tabs}
\alias{tab}
\title{tabs}
\usage{
tabs(inputId, ..., value = default_value)

update_tabs(session = shiny::getDefaultReactiveDomain(), inputId, ...)

tab(...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
Tabs organize content into multiple sections and allow users to navigate between them.
}
\details{
\itemize{
\item \bold{children*}. Type: \code{ReactNode | ((item: T) => ReactElement)}. Default: NA.
\item \bold{variant}. Type: \code{solid | bordered | light | underlined}. Default: "solid".
\item \bold{color}. Type: \code{default | primary | secondary | success | warning | danger}. Default: "default".
\item \bold{size}. Type: \code{sm | md | lg}. Default: "md".
\item \bold{radius}. Type: \code{none | sm | md | lg | full}. Default: NA.
\item \bold{fullWidth}. Type: \code{boolean}. Default: false.
\item \bold{items}. Type: \code{Iterable<T>}. Default: NA.
\item \bold{disabledKeys}. Type: \code{React.Key[]}. Default: NA.
\item \bold{selectedKey}. Type: \code{React.Key}. Default: NA.
\item \bold{defaultSelectedKey}. Type: \code{React.Key}. Default: NA.
\item \bold{shouldSelectOnPressUp}. Type: \code{boolean}. Default: true.
\item \bold{keyboardActivation}. Type: \code{automatic | manual}. Default: "automatic".
\item \bold{motionProps}. Type: \code{MotionProps}. Default: NA.
\item \bold{disableCursorAnimation}. Type: \code{boolean}. Default: false.
\item \bold{isDisabled}. Type: \code{boolean}. Default: false.
\item \bold{disableAnimation}. Type: \code{boolean}. Default: false.
\item \bold{classNames}. Type: \code{Partial<Record<"base"｜ "tabList"｜ "tab"｜ "tabContent"｜ "cursor" ｜ "panel" ｜ "tabWrapper", string>>}. Default: NA.
\item \bold{placement}. Type: \code{top | bottom | start | end}. Default: "top".
\item \bold{isVertical}. Type: \code{boolean}. Default: false.
\item \bold{destroyInactiveTabPanel}. Type: \code{boolean}. Default: true.
}
\itemize{
\item \bold{onSelectionChange}. Type: \code{(key: React.Key) => any}. Default: NA.
}
\itemize{
\item \bold{tabRef}. Type: \code{RefObject<HTMLButtonElement>}. Default: NA.
\item \bold{children*}. Type: \code{ReactNode}. Default: NA.
\item \bold{title}. Type: \code{ReactNode}. Default: NA.
\item \bold{titleValue}. Type: \code{string}. Default: NA.
\item \bold{href}. Type: \code{string}. Default: NA.
\item \bold{target}. Type: \code{HTMLAttributeAnchorTarget}. Default: NA.
\item \bold{rel}. Type: \code{string}. Default: NA.
\item \bold{download}. Type: \code{boolean | string}. Default: NA.
\item \bold{ping}. Type: \code{string}. Default: NA.
\item \bold{referrerPolicy}. Type: \code{HTMLAttributeReferrerPolicy}. Default: NA.
\item \bold{shouldSelectOnPressUp}. Type: \code{boolean}. Default: NA.
}
}
\examples{
library(shiny)
library(shinyNextUI)

items <- tagList(
  tab(
    key = 1,
    title = div(
      class = "flex items-center gap-1",
      icon("home"),
      "Tab 1"
    ),
    card(
      card_body(
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit,
          sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
          Ut enim ad minim veniam, quis nostrud exercitation ullamco
          laboris nisi ut aliquip ex ea commodo consequat."
      )
    )
  ),
  tab(
    key = 2,
    title = "Tab 2",
    card(
      card_body(
        "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
          nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."
      )
    )
  ),
  tab(
    key = 3,
    title = "Tab 3",
    card(
      card_body(
        "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui
          officia deserunt mollit anim id est laborum."
      )
    )
  )
)

ui <- nextui_page(
  debug_react = TRUE,
  p(class = "font-extrabold text-2xl uppercase", "Simple tabs"),
  tabs(
    inputId = "tabs1",
    disabledKeys = "2",
    items
  ),
  spacer(y = 2),
  select_input(
    "select",
    label = "Tab to select:",
    value = "1",
    select_item(key = 1, value = "1", "1"),
    select_item(key = 3, value = "3", "3")
  ),
  p("Selected tab is:", textOutput("active_tab", inline = TRUE)),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Tab size"),
  lapply(sizes, function(size) {
    tagList(
      p(class = "", sprintf("Size: \%s", size)),
      tabs(
        inputId = sprintf("tabs-\%s", size),
        size = size,
        items
      )
    )
  }),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Tab variants"),
  lapply(tabs_variants, function(variant) {
    tagList(
      p(sprintf("Variant: \%s", variant)),
      tabs(
        inputId = sprintf("tabs-\%s", variant),
        variant = variant,
        items
      )
    )
  }),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Tab color"),
  lapply(colors, function(color) {
    tagList(
      p(class = "", sprintf("Color: \%s", color)),
      tabs(
        inputId = sprintf("tabs-\%s", color),
        variant = "bordered",
        color = color,
        items
      )
    )
  })
)

server <- function(input, output, session) {
  output$active_tab <- renderText(input$tabs1)
  observeEvent(input$select, {
    update_tabs(session, inputId = "tabs1", value = input$select)
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/tabs}.
}
