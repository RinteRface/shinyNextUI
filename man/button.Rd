% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/doc.R, R/inputs.R
\name{button}
\alias{button}
\alias{action_button}
\alias{update_action_button}
\title{button}
\usage{
button(...)

action_button(inputId, ..., value = default_value)

update_action_button(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{inputId}{ID of the component.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
}
\description{
Buttons allow users to perform actions and choose with a single tap.
}
\details{
\enumerate{
\item Button Props
\itemize{
\item \bold{color}. Change button color. Type: NormalColors. Default: default.
\item \bold{size}. Change button size. Type: NormalSizes. Default: md.
\item \bold{disabled}. Disable button. Type: boolean. Default: false.
\item \bold{bordered}. Bordered button. Type: boolean. Default: false.
\item \bold{flat}. Flat button. Type: boolean. Default: false.
\item \bold{rounded}. Rounded button. Type: boolean. Default: false.
\item \bold{ghost}. The opposite color. Type: boolean. Default: false.
\item \bold{shadow}. Display shadow effect. Type: boolean. Default: false.
\item \bold{ripple}. Display drip animation. Type: boolean. Default: true.
\item \bold{auto}. Autoscale button width. Type: boolean. Default: false.
\item \bold{animated}. Display drip and scale animation. Type: boolean. Default: true.
\item \bold{borderWeight}. Border weight for bordered button. Type: NormalWeights. Default: normal.
\item \bold{autoFocus}. Automatically focus button. Type: boolean. Default: false.
\item \bold{onClick}. Button click handler. Type: MouseEventHandler. Default: NA.
\item \bold{icon}. Show icon in button. Type: ReactNode. Default: NA.
\item \bold{iconRight}. Show icon on the other side of the button. Type: ReactNode. Default: NA.
\item \bold{type}. Native type of button element. Type: button reset submit. Default: button.
\item \bold{ref}. forwardRef. Type: Ref<HTMLButtonElement | null>. Default: NA.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{iconLeftCss}. Override icon CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{iconRightCss}. Override iconRight CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: button.
\item \bold{...}. Button native props. Type: 'id', 'className', .... Default: NA.
}
\item Button Events
\itemize{
\item \bold{onClick deprecated}. Button click handler. Type: (e: PressEvent) => void. Default: NA.
\item \bold{onPress}. Handler that is called when the press is released over the button.. Type: (e: PressEvent) => void. Default: NA.
\item \bold{onPressUp}. Handler that is called when a press is released over the button, regardless of whether it started on the button or not.. Type: (e: PressEvent) => void. Default: NA.
\item \bold{onPressStart}. Handler that is called when a press interaction starts.. Type: (e: PressEvent) => void. Default: NA.
\item \bold{onPressEnd}. Handler that is called when a press interaction ends, either over the button or when the pointer leaves the button.. Type: (e: PressEvent) => void. Default: NA.
\item \bold{onPressChange}. Handler that is called when the press state changes.. Type: (isPressed: boolean) => void. Default: NA.
}
\item Button Accessibility Props
\itemize{
\item \bold{id}. The element's unique identifier. See MDN. Type: string. Default: NA.
\item \bold{excludeFromTabOrder}. Whether to exclude the element from the sequential tab order. If true, the element will not be focusable via the keyboard by tabbing. This should be avoided except in rare scenarios where an alternative means of accessing the element or its functionality via the keyboard is available.. Type: boolean. Default: NA.
\item \bold{aria-expanded}. Indicates whether the element, or another grouping element it controls, is currently expanded or collapsed.. Type: boolean. Default: NA.
\item \bold{aria-haspopup}. Indicates the availability and type of interactive popup element, such as menu or dialog, that can be triggered by an element.. Type: boolean menu listbox tree grid dialog. Default: NA.
\item \bold{aria-controls}. Identifies the element (or elements) whose contents or presence are controlled by the current element.. Type: string. Default: NA.
\item \bold{aria-pressed}. Indicates the current "pressed" state of toggle buttons.. Type: boolean. Default: NA.
\item \bold{aria-label}. Defines a string value that labels the current element. Type: string. Default: NA.
\item \bold{aria-labelledby}. Identifies the element (or elements) that labels the current element. Type: string. Default: NA.
\item \bold{aria-describedby}. Identifies the element (or elements) that describes the object.. Type: string. Default: NA.
\item \bold{aria-details}. Identifies the element (or elements) that provide a detailed, extended description for the object.. Type: string. Default: NA.
}
}
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)

ui <- nextui_page(
  reactOutput("button")
)

server <- function(input, output, session) {
  n_click <- reactiveVal(0)
  observeEvent(input$clicked, {
    n_click(n_click() + 1)
  })

  output$button <- renderReact({
    action_button(
      inputId = "clicked",
      color = "primary",
      shadow = TRUE,
      sprintf(
        "Test Button. You clicked: \%s times.",
        n_click()
      )
    )
  })

  exportTestValues(n_click = n_click())
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/button}.
}
