% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/components.R, R/doc.R
\name{badge}
\alias{badge}
\title{badge}
\usage{
badge(...)
}
\arguments{
\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
}
\description{
Badges are used as a small numerical value or status descriptor for UI elements.
}
\details{
\enumerate{
\item Badge Props
\itemize{
\item \bold{children}. The wrapped component.. Type: ReactNode. Default: NA.
\item \bold{content}. The content of the badge. The badge will be rendered relative to its children.. Type: string number ReactNode. Default: NA.
\item \bold{color}. The badge color.. Type: SimpleColors. Default: default.
\item \bold{size}. The badge size.. Type: NormalSizes. Default: md.
\item \bold{variant}. The badge variation.. Type: BadgeVariant. Default: default.
\item \bold{placement}. The placement of the badge content.. Type: BadgePlacements. Default: top-right.
\item \bold{borderWeight}. The border weight for bordered badge variation.. Type: NormalWeights. Default: normal.
\item \bold{shape}. The wrapped shape the badge should overlap.. Type: circle rectangle. Default: rectangle.
\item \bold{horizontalOffset}. The horizontal offset of the badge content.. Type: string number. Default: NA.
\item \bold{verticalOffset}. The vertical offset of the badge content.. Type: string number. Default: NA.
\item \bold{isInvisible}. Whether the badge is invisible.. Type: boolean. Default: false.
\item \bold{enableShadow}. Whether the badge shadow should be enabled.. Type: boolean. Default: false.
\item \bold{isSquared}. Whether the badge corners should be squared.. Type: boolean. Default: false.
\item \bold{disableOutline}. Whether the badge outline should be disabled.. Type: boolean. Default: false.
\item \bold{disableAnimation}. Whether the badge content animation should be disabled.. Type: boolean. Default: false.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: span.
}
}
}
\examples{
library(shiny)
library(shinyNextUI)

badge <- shinyNextUI:::component("Badge")

badge_config <- data.frame(
  size = c("xs", "sm", rep("md", 2), "lg", "xl"),
  color = c(
    "primary",
    "secondary",
    "neutral",
    "success",
    "warning",
    "error"
  ),
  enable_shadow = c(rep(FALSE, 3), rep(TRUE, 3)),
  variant = c(
    rep("bordered", 3),
    rep("flat", 3)
  ),
  is_squared = c(rep(TRUE, 3), FALSE, rep(FALSE, 2))
)

badge_factory <- function(size, color, enable_shadow, variant, is_squared) {
  grid(
    badge(
      size = size,
      color = color,
      enableShadow = enable_shadow,
      variant = variant,
      isSquared = is_squared,
      "Badge"
    )
  )
}

badges <- purrr::pmap(badge_config, badge_factory)

ui <- nextui_page(
  text("Badges"),
  grid_container(
    gap = 1,
    justify = "center",
    badges
  ),
  spacer(y = 2),
  text("Badge content"),
  grid_container(
    grid(
      badge(
        color = "error",
        content = 5,
        placement = "top-left",
        avatar(
          bordered = TRUE,
          squared = TRUE,
          color = "secondary",
          size = "lg",
          src = "https://i.pravatar.cc/300?u=a042581f4e29026707d"
        )
      )
    )
  ),
  spacer(y = 2),
  text("Dot variant"),
  grid_container(
    grid(
      badge(variant = "dot", color = "success", size = "lg"),
    )
  ),
  spacer(y = 2),
  text("Points variant"),
  grid_container(
    grid(
      badge(variant = "points", color = "success", size = "lg"),
    )
  )
)

server <- function(input, output, session) {}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/badge}.
}
