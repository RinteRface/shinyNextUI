% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{input}
\alias{input}
\alias{text_input}
\alias{update_text_input}
\alias{numeric_input}
\alias{update_numeric_input}
\alias{date_input}
\alias{update_date_input}
\title{input}
\usage{
text_input(inputId, ..., value = default_value)

update_text_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)

numeric_input(inputId, ..., value = default_value)

update_numeric_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)

date_input(inputId, ..., value = default_value)

update_date_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
Input is a component that allows users to enter text. It can be used to get user inputs in forms, search fields, and more.
}
\details{
\itemize{
\item \bold{children}. The content of the input.. Type: ReactNode. Default: NA.
\item \bold{variant}. The variant of the input.. Type: flat | bordered | faded | underlined. Default: flat.
\item \bold{color}. The color of the input.. Type: default | primary | secondary | success | warning | danger. Default: default.
\item \bold{size}. The size of the input.. Type: sm | md | lg. Default: md.
\item \bold{radius}. The radius of the input.. Type: none | sm | md | lg | full. Default: NA.
\item \bold{label}. The content to display as the label.. Type: ReactNode. Default: NA.
\item \bold{value}. The current value of the input (controlled).. Type: string. Default: NA.
\item \bold{defaultValue}. The default value of the input (uncontrolled).. Type: string. Default: NA.
\item \bold{placeholder}. The placeholder of the input.. Type: string. Default: NA.
\item \bold{description}. A description for the input. Provides a hint such as specific requirements for what to choose.. Type: ReactNode. Default: NA.
\item \bold{errorMessage}. An error message for the input.. Type: ReactNode. Default: NA.
\item \bold{startContent}. Element to be rendered in the left side of the input.. Type: ReactNode. Default: NA.
\item \bold{endContent}. Element to be rendered in the right side of the input.. Type: ReactNode. Default: NA.
\item \bold{labelPlacement}. The position of the label.. Type: inside | outside | outside-left. Default: inside.
\item \bold{fullWidth}. Whether the input should take up the width of its parent.. Type: boolean. Default: true.
\item \bold{isClearable}. Whether the input should have a clear button.. Type: boolean. Default: false.
\item \bold{isRequired}. Whether user input is required on the input before form submission.. Type: boolean. Default: false.
\item \bold{isReadOnly}. Whether the input can be selected but not changed by the user.. Type: boolean. Default: .
\item \bold{isDisabled}. Whether the input is disabled.. Type: boolean. Default: false.
\item \bold{isInvalid}. Whether the input is invalid.. Type: boolean. Default: false.
\item \bold{baseRef}. The ref to the base element.. Type: RefObject\if{html}{\out{<HTMLDivElement>}}. Default: NA.
\item \bold{validationState}. Whether the input should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid instead.. Type: valid | invalid. Default: NA.
\item \bold{disableAnimation}. Whether the input should be animated.. Type: boolean. Default: false.
\item \bold{classNames}. Allows to set custom class names for the checkbox slots.. Type: Record<"base"｜ "label"｜ "inputWrapper"｜ "innerWrapper"｜ "mainWrapper" ｜ "input" ｜ "clearButton" ｜ "helperWrapper" ｜ "description" ｜ "errorMessage", string>. Default: NA.
}
\itemize{
\item \bold{onChange}. Handler that is called when the element's value changes. You can pull out the new value by accessing event.target.value (string).. Type: React.ChangeEvent\if{html}{\out{<HTMLInputElement>}}. Default: NA.
\item \bold{onValueChange}. Handler that is called when the element's value changes.. Type: (value: string) => void. Default: NA.
\item \bold{onClear}. Handler that is called when the clear button is clicked.. Type: () => void. Default: NA.
}
}
\examples{
library(shiny)
library(shinyNextUI)

ui <- nextui_page(
  div(
    class = "flex gap-1",
    text_input(
      inputId = "text",
      value = "Plop",
      placeholder = "Next UI",
      label = "Text input"
    ),
    textOutput("text_val")
  ),
  spacer(y = 5),
  div(
    class = "flex gap-1",
    numeric_input(
      inputId = "numeric",
      value = 10,
      label = "Numeric input"
    ),
    textOutput("numeric_val")
  ),
  spacer(y = 5),
  div(
    class = "flex gap-1",
    date_input(
      inputId = "date",
      value = "2023-12-11",
      label = "Date input"
    ),
    textOutput("date_val")
  )
)

server <- function(input, output, session) {
  output$text_val <- renderText(input$text)
  output$numeric_val <- renderText(input$numeric)
  output$date_val <- renderText(input$date)
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/input}.
}
