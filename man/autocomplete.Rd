% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{autocomplete}
\alias{autocomplete}
\alias{autocomplete_section}
\alias{autocomplete_item}
\alias{update_autocomplete}
\title{autocomplete}
\usage{
autocomplete(inputId, ..., value = default_value)

autocomplete_section(...)

autocomplete_item(...)

update_autocomplete(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.

An autocomplete combines a text input with a listbox, allowing users to filter a list of options to items matching a query.
}
\details{
\enumerate{
\item Autocomplete Props
\itemize{
\item \bold{children*}. The children to render. Usually a list of AutocompleteItem and AutocompleteSection elements.. Type: ReactNode[]. Default: NA.
\item \bold{label}. The content to display as the label.. Type: ReactNode. Default: NA.
\item \bold{name}. The name of the input element, used when submitting an HTML form. See MDN.. Type: string. Default: NA.
\item \bold{variant}. The variant of the Autocomplete.. Type: flat | bordered | faded | underlined. Default: flat.
\item \bold{color}. The color of the Autocomplete.. Type: default | primary | secondary | success | warning | danger. Default: default.
\item \bold{size}. The size of the Autocomplete.. Type: sm | md | lg. Default: md.
\item \bold{radius}. The radius of the Autocomplete.. Type: none | sm | md | lg | full. Default: NA.
\item \bold{items}. The list of Autocomplete items. (controlled). Type: Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{defaultItems}. The list of Autocomplete items (uncontrolled).. Type: Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{inputValue}. The value of the Autocomplete input (controlled).. Type: string. Default: NA.
\item \bold{defaultInputValue}. The value of the Autocomplete input (uncontrolled).. Type: string. Default: NA.
\item \bold{allowsCustomValue}. Whether the Autocomplete allows a non-item matching input value to be set.. Type: boolean. Default: false.
\item \bold{allowsEmptyCollection}. Whether the autocomplete allows the menu to be open when the collection is empty.. Type: boolean. Default: true.
\item \bold{shouldCloseOnBlur}. Whether the Autocomplete should close when the input is blurred.. Type: boolean. Default: true.
\item \bold{placeholder}. Temporary text that occupies the text input when it is empty.. Type: string. Default: NA.
\item \bold{description}. A description for the field. Provides a hint such as specific requirements for what to choose.. Type: ReactNode. Default: NA.
\item \bold{menuTrigger}. The action that causes the menu to open.. Type: focus | input | manual. Default: focus.
\item \bold{labelPlacement}. The position of the label.. Type: inside | outside | outside-left. Default: inside.
\item \bold{selectedKey}. The currently selected key in the collection (controlled).. Type: React.Key. Default: NA.
\item \bold{defaultSelectedKey}. The initial selected key in the collection (uncontrolled).. Type: React.Key. Default: NA.
\item \bold{disabledKeys}. The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.. Type: all | React.Key[]. Default: NA.
\item \bold{errorMessage}. An error message to display below the field.. Type: ReactNode. Default: NA.
\item \bold{startContent}. Element to be rendered in the left side of the Autocomplete.. Type: ReactNode. Default: NA.
\item \bold{endContent}. Element to be rendered in the right side of the Autocomplete.. Type: ReactNode. Default: NA.
\item \bold{autoFocus}. Whether the Autocomplete should be focused on render.. Type: boolean. Default: false.
\item \bold{defaultFilter}. The filter function used to determine if a option should be included in the Autocomplete list.. Type: (textValue: string, inputValue: string) => boolean. Default: NA.
\item \bold{filterOptions}. The options used to create the collator used for filtering.. Type: Intl.CollatorOptions. Default: { sensitivity: 'base'}.
\item \bold{isReadOnly}. Whether the Autocomplete is read only.. Type: boolean. Default: false.
\item \bold{isRequired}. Whether the Autocomplete is required.. Type: boolean. Default: false.
\item \bold{isInvalid}. Whether the Autocomplete is invalid.. Type: boolean. Default: false.
\item \bold{isDisabled}. Whether the Autocomplete is disabled.. Type: boolean. Default: false.
\item \bold{fullWidth}. Whether the input should take up the width of its parent.. Type: boolean. Default: true.
\item \bold{selectorIcon}. The icon that represents the autocomplete open state. Usually a chevron icon.. Type: ReactNode. Default: NA.
\item \bold{clearIcon}. The icon to be used in the clear button. Usually a cross icon.. Type: ReactNode. Default: NA.
\item \bold{showScrollIndicators}. Whether the scroll indicators should be shown when the listbox is scrollable.. Type: boolean. Default: true.
\item \bold{scrollRef}. A ref to the scrollable element.. Type: React.RefObject\if{html}{\out{<HTMLElement>}}. Default: NA.
\item \bold{inputProps}. Props to be passed to the Input component.. Type: InputProps. Default: NA.
\item \bold{popoverProps}. Props to be passed to the Popover component.. Type: PopoverProps. Default: NA.
\item \bold{listboxProps}. Props to be passed to the Listbox component.. Type: ListboxProps. Default: NA.
\item \bold{scrollShadowProps}. Props to be passed to the ScrollShadow component.. Type: ScrollShadowProps. Default: NA.
\item \bold{selectorButtonProps}. Props to be passed to the selector button.. Type: ButtonProps. Default: NA.
\item \bold{clearButtonProps}. Props to be passed to the clear button.. Type: ButtonProps. Default: NA.
\item \bold{isClearable}. Whether the clear button should be shown.. Type: boolean. Default: true.
\item \bold{disableClearable}. Whether the clear button should be hidden. (Deprecated) Use isClearable instead.. Type: boolean. Default: false.
\item \bold{disableAnimation}. Whether the Autocomplete should be animated.. Type: boolean. Default: true.
\item \bold{disableSelectorIconRotation}. Whether the select should disable the rotation of the selector icon.. Type: boolean. Default: false.
\item \bold{classNames}. Allows to set custom class names for the Autocomplete slots.. Type: Record<"base"｜ "listboxWrapper"｜ "listbox"｜ "popoverContent" ｜ "endContentWrapper"｜ "clearButton" ｜ "selectorButton", string>. Default: NA.
}
\item Autocomplete Events
\itemize{
\item \bold{onOpenChange}. Method that is called when the open state of the menu changes. Returns the new open state and the action that caused the opening of the menu.. Type: (isOpen: boolean, menuTrigger?: MenuTriggerAction) => void. Default: NA.
\item \bold{onInputChange}. Handler that is called when the Autocomplete input value changes.. Type: (value: string) => void. Default: NA.
\item \bold{onSelectionChange}. Handler that is called when the Autocomplete selection changes.. Type: (key: React.Key) => void. Default: NA.
\item \bold{onFocus}. Handler that is called when the Autocomplete input is focused.. Type: (e:FocusEvent\if{html}{\out{<HTMLInputElement>}}) => void. Default: NA.
\item \bold{onBlur}. Handler that is called when the Autocomplete input is blurred.. Type: (e:FocusEvent\if{html}{\out{<HTMLInputElement>}}) => void. Default: NA.
\item \bold{onFocusChange}. Handler that is called when the Autocomplete input focus changes.. Type: (isFocused: boolean) => void. Default: NA.
\item \bold{onKeyDown}. Handler that is called when a key is pressed.. Type: (e: KeyboardEvent) => void. Default: NA.
\item \bold{onKeyUp}. Handler that is called when a key is released.. Type: (e: KeyboardEvent) => void. Default: NA.
\item \bold{onClose}. Handler that is called when the Autocomplete's Popover is closed.. Type: () => void. Default: NA.
}
}

\enumerate{
\item Autocomplete Props
\itemize{
\item \bold{children*}. Type: ReactNode[]. Default: .
\item \bold{label}. Type: ReactNode. Default: .
\item \bold{name}. Type: string. Default: .
\item \bold{variant}. Type: flat | bordered | faded | underlined. Default: "flat".
\item \bold{color}. Type: default | primary | secondary | success | warning | danger. Default: "default".
\item \bold{size}. Type: sm | md | lg. Default: "md".
\item \bold{radius}. Type: none | sm | md | lg | full. Default: .
\item \bold{items}. Type: Iterable\if{html}{\out{<T>}}. Default: .
\item \bold{defaultItems}. Type: Iterable\if{html}{\out{<T>}}. Default: .
\item \bold{inputValue}. Type: string. Default: .
\item \bold{defaultInputValue}. Type: string. Default: .
\item \bold{allowsCustomValue}. Type: boolean. Default: false.
\item \bold{allowsEmptyCollection}. Type: boolean. Default: true.
\item \bold{shouldCloseOnBlur}. Type: boolean. Default: true.
\item \bold{placeholder}. Type: string. Default: .
\item \bold{description}. Type: ReactNode. Default: .
\item \bold{menuTrigger}. Type: focus | input | manual. Default: "focus".
\item \bold{labelPlacement}. Type: inside | outside | outside-left. Default: "inside".
\item \bold{selectedKey}. Type: React.Key. Default: .
\item \bold{defaultSelectedKey}. Type: React.Key. Default: .
\item \bold{disabledKeys}. Type: all | React.Key[]. Default: .
\item \bold{errorMessage}. Type: ReactNode | ((v: ValidationResult) => ReactNode). Default: .
\item \bold{validate}. Type: (value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined. Default: .
\item \bold{validationBehavior}. Type: native | aria. Default: "native".
\item \bold{startContent}. Type: ReactNode. Default: .
\item \bold{endContent}. Type: ReactNode. Default: .
\item \bold{autoFocus}. Type: boolean. Default: false.
\item \bold{defaultFilter}. Type: (textValue: string, inputValue: string) => boolean. Default: .
\item \bold{filterOptions}. Type: Intl.CollatorOptions. Default: "{ sensitivity: 'base'}".
\item \bold{maxListboxHeight}. Type: number. Default: "256".
\item \bold{itemHeight}. Type: number. Default: "32".
\item \bold{isVirtualized}. Type: boolean. Default: "undefined".
\item \bold{isReadOnly}. Type: boolean. Default: false.
\item \bold{isRequired}. Type: boolean. Default: false.
\item \bold{isInvalid}. Type: boolean. Default: false.
\item \bold{isDisabled}. Type: boolean. Default: false.
\item \bold{fullWidth}. Type: boolean. Default: true.
\item \bold{selectorIcon}. Type: ReactNode. Default: .
\item \bold{clearIcon}. Type: ReactNode. Default: .
\item \bold{showScrollIndicators}. Type: boolean. Default: true.
\item \bold{scrollRef}. Type: React.RefObject\if{html}{\out{<HTMLElement>}}. Default: .
\item \bold{inputProps}. Type: InputProps. Default: .
\item \bold{popoverProps}. Type: PopoverProps. Default: .
\item \bold{listboxProps}. Type: ListboxProps. Default: .
\item \bold{scrollShadowProps}. Type: ScrollShadowProps. Default: .
\item \bold{selectorButtonProps}. Type: ButtonProps. Default: .
\item \bold{clearButtonProps}. Type: ButtonProps. Default: .
\item \bold{isClearable}. Type: boolean. Default: true.
\item \bold{disableClearable}. Type: boolean. Default: false.
\item \bold{disableAnimation}. Type: boolean. Default: true.
\item \bold{disableSelectorIconRotation}. Type: boolean. Default: false.
\item \bold{classNames}. Type: Partial<Record<'base' | 'listboxWrapper' | 'listbox' | 'popoverContent' | 'endContentWrapper' | 'clearButton' | 'selectorButton', string>>. Default: .
}
\item Autocomplete Events
\itemize{
\item \bold{onOpenChange}. Type: (isOpen: boolean, menuTrigger?: MenuTriggerAction) => void. Default: NA.
\item \bold{onInputChange}. Type: (value: string) => void. Default: NA.
\item \bold{onSelectionChange}. Type: (key: React.Key) => void. Default: NA.
\item \bold{onFocus}. Type: (e: FocusEvent\if{html}{\out{<HTMLInputElement>}}) => void. Default: NA.
\item \bold{onBlur}. Type: (e: FocusEvent\if{html}{\out{<HTMLInputElement>}}) => void. Default: NA.
\item \bold{onFocusChange}. Type: (isFocused: boolean) => void. Default: NA.
\item \bold{onKeyDown}. Type: (e: KeyboardEvent) => void. Default: NA.
\item \bold{onKeyUp}. Type: (e: KeyboardEvent) => void. Default: NA.
\item \bold{onClose}. Type: () => void. Default: NA.
}
}
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)

animals <- list(
  list(
    label = "Bulbasaur",
    value = "bulbasaur",
    description = "Blabla",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png"
  ),
  list(
    label = "Pikachu",
    value = "pikachu",
    description = "Electric mouse",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png"
  )
)

items <- lapply(animals, function(animal) {
  autocomplete_item(
    key = animal[["value"]],
    value = animal[["value"]],
    startContent = avatar(src = animal[["avatar"]]),
    animal[["label"]]
  )
})

ui <- nextui_page(
  debug_react = TRUE,
  action_button("update", "Update to Pikachu?"),
  spacer(y = 4),
  autocomplete(
    "autocomplete",
    label = "Select a pokemon",
    isRequired = TRUE,
    value = "bulbasaur",
    autocomplete_section(
      title = "Default pokemons",
      items
    )
  ),
  textOutput("res")
)

server <- function(input, output, session) {
  output$res <- renderText(input$autocomplete)
  observeEvent(input$autocomplete, {
    print(input$autocomplete)
  })

  observeEvent(input$update, {
    update_autocomplete(session, "autocomplete", value = "pikachu")
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
library(shiny)
library(shinyNextUI)
library(shiny.react)

animals <- list(
  list(
    label = "Bulbasaur",
    value = "bulbasaur",
    description = "Blabla",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png"
  ),
  list(
    label = "Pikachu",
    value = "pikachu",
    description = "Electric mouse",
    avatar = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png"
  )
)

items <- lapply(animals, function(animal) {
  autocomplete_item(
    key = animal[["value"]],
    value = animal[["value"]],
    startContent = avatar(src = animal[["avatar"]]),
    animal[["label"]]
  )
})

ui <- nextui_page(
  debug_react = TRUE,
  action_button("update", "Update to Pikachu?"),
  spacer(y = 4),
  autocomplete(
    "autocomplete",
    label = "Select a pokemon",
    isRequired = TRUE,
    value = "bulbasaur",
    autocomplete_section(
      title = "Default pokemons",
      items
    )
  ),
  textOutput("res")
)

server <- function(input, output, session) {
  output$res <- renderText(input$autocomplete)
  observeEvent(input$autocomplete, {
    print(input$autocomplete)
  })

  observeEvent(input$update, {
    update_autocomplete(session, "autocomplete", value = "pikachu")
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/autocomplete}.

See \url{https://nextui.org/docs/components/autocomplete}.
}
