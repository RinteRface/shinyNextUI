% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{input}
\alias{input}
\alias{textInput}
\alias{updateTextInput}
\alias{numericInput}
\alias{updateNumericInput}
\alias{dateInput}
\alias{updateDateInput}
\title{input}
\usage{
textInput(inputId, ..., value = defaultValue)

updateTextInput(session = shiny::getDefaultReactiveDomain(), inputId, ...)

numericInput(inputId, ..., value = defaultValue)

updateNumericInput(session = shiny::getDefaultReactiveDomain(), inputId, ...)

dateInput(inputId, ..., value = defaultValue)

updateDateInput(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
Inputs fields are used to get the user input in a text field.
}
\details{
\enumerate{
\item Input Props
\itemize{
\item \bold{value}. number. Type: string. Default: NA.
\item \bold{initialValue}. Input default value. Type: string. Default: NA.
\item \bold{placeholder}. The short hint displayed in the input. Type: string. Default: NA.
\item \bold{size}. Change input size. Type: NormalSizes. Default: medium.
\item \bold{color}. Change input text, border and label color. Type: SimpleColors. Default: default.
\item \bold{status}. Change input status color. Type: SimpleColors. Default: default.
\item \bold{helperColor}. Change helper text color. Type: SimpleColors. Default: default.
\item \bold{required}. Required input prop. Type: boolean. Default: false.
\item \bold{readOnly}. It prevents the user from changing the value of the field. Type: boolean. Default: false.
\item \bold{disabled}. Disable input. Type: boolean. Default: false.
\item \bold{clearable}. Show clear button. Type: boolean. Default: false.
\item \bold{rounded}. Rounded input. Type: boolean. Default: false.
\item \bold{bordered}. Bordered input. Type: boolean. Default: false.
\item \bold{underlined}. Underlined input. Type: boolean. Default: false.
\item \bold{shadow}. Enable or disable the input shadow. Type: boolean. Default: true.
\item \bold{animated}. Enable or disable the input animation. Type: boolean. Default: true.
\item \bold{autoComplete}. HTML input autocomplete attribute. Type: string. Default: off.
\item \bold{borderWeight}. Border weight for bordered input. Type: NormalWeights. Default: normal.
\item \bold{fullWidth}. If true, the input will take up the full width of its container.. Type: boolean. Default: false.
\item \bold{width}. Input width. Type: string. Default: initial.
\item \bold{label}. Text label for input. Type: string. Default: NA.
\item \bold{labelPlaceholder}. The placeholder becomes a label. Type: string. Default: NA.
\item \bold{labelLeft}. Text label at left of the input. Type: string. Default: NA.
\item \bold{labelRight}. Text label at right of the input. Type: string. Default: NA.
\item \bold{helperText}. Add a helper text to Input. Type: string. Default: NA.
\item \bold{contentLeft}. Left content for input. Type: React.ReactNode. Default: NA.
\item \bold{contentRight}. Right content for input. Type: React.ReactNode. Default: NA.
\item \bold{contentClickable}. Left/right content are clickable (just applied when the styling prop is true, see the next props). Type: boolean. Default: false.
\item \bold{contentLeftStyling}. Allows the Input component to wrap the contentLeft in a container. Type: boolean. Default: true.
\item \bold{contentRightStyling}. Allows the Input component to wrap the contentRight in a container. Type: boolean. Default: true.
\item \bold{onChange}. Callback fired when the value is changed. Type: (e: React.ChangeEvent\if{html}{\out{<HTMLInputElement>}}) => void. Default: NA.
\item \bold{onFocus}. Callback fired when the input is focused.. Type: (e: React.FocusEvent\if{html}{\out{<HTMLInputElement>}}) => void. Default: NA.
\item \bold{onBlur}. Callback fired when the input is blurred.. Type: (e: React.FocusEvent\if{html}{\out{<HTMLInputElement>}}) => void. Default: NA.
\item \bold{onContentClick}. click icon event. Type: (key: ContentPosition, e: React.MouseEvent) => void. Default: NA.
\item \bold{onClearClick}. clear icon event. Type: (e: React.MouseEvent) => void. Default: NA.
\item \bold{ref}. forwardRef. Type: Ref<HTMLInputElement | null>. Default: NA.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: input.
\item \bold{...}. Input native props. Type: InputHTMLAttributes. Default: NA.
}
\item NA
\itemize{
\item \bold{hideToggle}. Hide toggle icon. Type: boolean. Default: false.
\item \bold{visibleIcon}. Custom visible password icon. Type: React.ReactNode. Default: NA.
\item \bold{hiddenIcon}. Custom hidden password icon. Type: React.ReactNode. Default: NA.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: input.
\item \bold{...}. Input props. Type: Input Props. Default: NA.
}
}
}
\examples{
library(shiny)
library(shinyNextUI)

ui <- nextui_page(
  grid_container(
    gap = 2,
    grid(
      textInput(
        inputId = "text",
        value = "Plop",
        placeholder = "Next UI",
        label = "Text input"
      )
    ),
    grid(textOutput("text_val"))
  ),
  grid_container(
    gap = 2,
    grid(
      numericInput(
        inputId = "numeric",
        value = 10,
        label = "Numeric input"
      )
    ),
    grid(textOutput("numeric_val"))
  ),
  grid_container(
    gap = 2,
    grid(
      dateInput(
        inputId = "date",
        value = "2023-12-11",
        label = "Date input"
      )
    ),
    grid(textOutput("date_val"))
  )
)

server <- function(input, output, session) {
  output$text_val <- renderText(input$text)
  output$numeric_val <- renderText(input$numeric)
  output$date_val <- renderText(input$date)
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/input}.
}
