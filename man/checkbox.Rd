% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{checkbox}
\alias{checkbox}
\alias{checkbox_input}
\alias{update_checkbox_input}
\title{checkbox}
\usage{
checkbox_input(inputId, ..., value = default_value)

update_checkbox_input(
  session = shiny::getDefaultReactiveDomain(),
  inputId,
  ...
)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
Checkboxes allow users to select multiple items from a list of individual items, or to mark one individual item as selected.
}
\details{
\itemize{
\item \bold{children}. The label of the checkbox.. Type: ReactNode. Default: NA.
\item \bold{icon}. The icon to be displayed when the checkbox is checked.. Type: CheckboxIconProps. Default: NA.
\item \bold{value}. The value of the checkbox element, used when submitting an HTML form.. Type: string. Default: .
\item \bold{name}. The name of the checkbox element, used when submitting an HTML form.. Type: string. Default: .
\item \bold{size}. The size of the checkbox.. Type: sm | md | lg. Default: md.
\item \bold{color}. The color of the checkbox.. Type: default | primary | secondary | success | warning | danger. Default: primary.
\item \bold{radius}. The radius of the checkbox.. Type: none | sm | md | lg | full. Default: NA.
\item \bold{lineThrough}. Whether the label should be crossed out.. Type: boolean. Default: false.
\item \bold{isSelected}. Whether the element should be selected (controlled).. Type: boolean. Default: .
\item \bold{defaultSelected}. Whether the element should be selected (uncontrolled).. Type: boolean. Default: .
\item \bold{isRequired}. Whether user checkbox is required on the checkbox before form submission.. Type: boolean. Default: false.
\item \bold{isReadOnly}. Whether the checkbox can be selected but not changed by the user.. Type: boolean. Default: .
\item \bold{isDisabled}. Whether the checkbox is disabled.. Type: boolean. Default: false.
\item \bold{isIndeterminate}. Indeterminism is presentational only. The indeterminate visual representation remains regardless of user interaction.. Type: boolean. Default: .
\item \bold{isInvalid}. Whether the checkbox is invalid.. Type: boolean. Default: false.
\item \bold{validationState}. Whether the checkbox should display its "valid" or "invalid" visual styling. (Deprecated) use isInvalid instead.. Type: valid | invalid. Default: NA.
\item \bold{disableAnimation}. Whether the animation should be disabled.. Type: boolean. Default: false.
\item \bold{classNames}. Allows to set custom class names for the checkbox slots.. Type: Record<"base"｜ "wrapper"｜ "icon"｜ "label", string>. Default: NA.
}
\itemize{
\item \bold{onChange}. Handler that is called when the element's selection state changes. You can pull out the new checked state by accessing event.target.checked (boolean).. Type: React.ChangeEvent\if{html}{\out{<HTMLInputElement>}}. Default: NA.
\item \bold{onValueChange}. Handler that is called when the element's selection state changes.. Type: (isSelected: boolean) => void. Default: NA.
}
}
\examples{
library(shiny)
library(shinyNextUI)

ui <- nextui_page(
  div(
    class = "flex gap-1",
    action_button("update", "Toggle checkbox"),
    spacer(y = 2),
    checkbox_input(
      inputId = "checkbox",
      value = TRUE,
      "My checkbox",
      isRounded = TRUE,
      color = "warning",
      lineThrough = TRUE
    ),
    textOutput("check_val")
  )
)

server <- function(input, output, session) {
  output$check_val <- renderText(input$checkbox)
  observeEvent(input$update, {
    update_checkbox_input(session, "checkbox", value = !input$checkbox)
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/checkbox}.
}
