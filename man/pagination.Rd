% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{pagination}
\alias{pagination}
\alias{update_pagination}
\title{pagination}
\usage{
pagination(inputId, ..., value = default_value)

update_pagination(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
The Pagination component allows you to display active page and navigate between multiple pages.
}
\details{
\itemize{
\item \bold{variant}. The pagination variant.. Type: flat | bordered | light | faded. Default: flat.
\item \bold{color}. The pagination color theme.. Type: default | primary | secondary | success | warning | danger. Default: default.
\item \bold{size}. The pagination size.. Type: sm | md | lg. Default: md.
\item \bold{radius}. The pagination border radius.. Type: none | sm | md | lg | full. Default: xl.
\item \bold{total}. The total number of pages.. Type: number. Default: 1.
\item \bold{dotsJump}. The number of pages that are added or subtracted on the '...' button.. Type: number. Default: 5.
\item \bold{initialPage}. The initial page. (uncontrolled). Type: number. Default: 1.
\item \bold{page}. The current page. (controlled). Type: number. Default: NA.
\item \bold{siblings}. The number of pages to show before and after the current page.. Type: number. Default: 1.
\item \bold{boundaries}. The number of pages to show at the beginning and end of the pagination.. Type: number. Default: 1.
\item \bold{loop}. Whether the pagination should be looped.. Type: boolean. Default: false.
\item \bold{isCompact}. Whether the pagination should have a compact style.. Type: boolean. Default: false.
\item \bold{isDisabled}. Whether the pagination is disabled.. Type: boolean. Default: false.
\item \bold{showShadow}. Whether the pagination cursor should have a shadow.. Type: boolean. Default: false.
\item \bold{showControls}. Whether the pagination should have controls.. Type: boolean. Default: false.
\item \bold{disableCursorAnimation}. Whether the pagination cursor should be hidden.. Type: boolean. Default: false.
\item \bold{renderItem}. The pagination item render function.. Type: PaginationItemProps. Default: NA.
\item \bold{getItemAriaLabel}. A function that allows you to customize the pagination items aria-label.. Type: (page: string) => string. Default: NA.
\item \bold{disableAnimation}. Whether the pagination cursor should be animated.. Type: boolean. Default: false.
\item \bold{classNames}. Allows to set custom class names for the pagination slots.. Type: Record<"base"｜ "wrapper" ｜ "prev"｜ "next" ｜ "item" ｜ "cursor" ｜ "forwardIcon" ｜ "ellipsis" ｜ "chevronNext", string>. Default: NA.
}
\itemize{
\item \bold{onChange}. Handler that is called when the pagination acitve page changes.. Type: (page: number) => void. Default: NA.
}
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)
library(thematic)

thematic_shiny()

max <- 10
cards <- lapply(seq_len(max), function(i) {
  tagList(
    spacer(y = 2),
    card(
      id = sprintf("mycard-\%s", i),
      card_header(sprintf("Card \%s", i)),
      card_body(
        sprintf("Card content \%s", i),
        slider_input(
          sprintf("obs-\%s", i),
          "Obs",
          minValue = 0,
          maxValue = 1000,
          value = 500
        ),
        plotOutput(sprintf("distPlot-\%s", i))
      )
    )
  )
})

ui <- nextui_page(
  pagination(
    inputId = "pagination",
    loop = TRUE,
    size = "lg",
    variant = "bordered",
    showControls = TRUE,
    page = 1,
    total = max
  )
)

server <- function(input, output, session) {
  history <- reactiveVal(NULL)

  # Dynamically insert cards with the pagination.
  observeEvent(input$pagination, {
    if (!is.null(history()))
      removeUI(sprintf("#mycard-\%s", history()), multiple = TRUE)
    insertUI(
      selector = "#pagination",
      where = "afterEnd",
      ui = cards[[input$pagination]]
    )
    history(input$pagination)

    output[[sprintf("distPlot-\%s", history())]] <- renderPlot({
      req(input[[sprintf("obs-\%s", history())]])
      hist(
        rnorm(input[[sprintf("obs-\%s", history())]]),
        main = sprintf("Super plot \%s", history())
      )
    })
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/pagination}.
}
