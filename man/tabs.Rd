% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{tabs}
\alias{tabs}
\alias{update_tabs}
\alias{tab}
\title{tabs}
\usage{
tabs(inputId, ..., value = default_value)

update_tabs(session = shiny::getDefaultReactiveDomain(), inputId, ...)

tab(...)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
Tabs organize content into multiple sections and allow users to navigate between them.
}
\details{
\itemize{
\item \bold{children*}. The list of tabs.. Type: ReactNode | ((item: T) => ReactElement). Default: NA.
\item \bold{variant}. The tabs appearance style.. Type: solid | bordered | light | underlined. Default: solid.
\item \bold{color}. The tabs color theme.. Type: default | primary | secondary | success | warning | danger. Default: default.
\item \bold{size}. The tabs size.. Type: sm | md | lg. Default: md.
\item \bold{radius}. The tabs border radius.. Type: none | sm | md | lg | full. Default: NA.
\item \bold{fullWidth}. Whether the tabs should take the full width of its parent.. Type: boolean. Default: false.
\item \bold{items}. The list of tabs (dynamic).. Type: Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{disabledKeys}. The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.. Type: React.Key[]. Default: NA.
\item \bold{selectedKey}. The key for the currently selected item.. Type: React.Key. Default: NA.
\item \bold{defaultSelectedKey}. The key for the initially selected item.. Type: React.Key. Default: NA.
\item \bold{disallowEmptySelection}. Whether the tabs should allow empty selection.. Type: boolean. Default: false.
\item \bold{shouldSelectOnPressUp}. Whether the tabs selection should occur on press up instead of press down.. Type: boolean. Default: true.
\item \bold{keyboardActivation}. Whether tabs are activated automatically on focus or manually.. Type: automatic | manual. Default: automatic.
\item \bold{motionProps}. The props to modify the cursor framer motion animation. Use the variants API to create your own animation.. Type: MotionProps. Default: NA.
\item \bold{disableCursorAnimation}. Whether the cursor should be hidden.. Type: boolean. Default: false.
\item \bold{isDisabled}. Whether the tab list should be disabled.. Type: boolean. Default: false.
\item \bold{disableAnimation}. Whether the tab list should be animated.. Type: boolean. Default: false.
\item \bold{classNames}. Allows to set custom class names for the card slots.. Type: Record<"base"｜ "tabList"｜ "tab"｜ "tabContent"｜ "cursor" ｜ "panel", string>. Default: NA.
}
\itemize{
\item \bold{onSelectionChange}. Handler that is called when the selection changes.. Type: (key: React.Key) => any. Default: NA.
}
\itemize{
\item \bold{children*}. The content of the tab.. Type: ReactNode. Default: NA.
\item \bold{title}. The title of the tab.. Type: ReactNode. Default: NA.
\item \bold{titleValue}. A string representation of the item's contents. Use this when the title is not readable.. Type: string. Default: NA.
\item \bold{href}. A URL to link to. See MDN.. Type: string. Default: NA.
\item \bold{target}. The target window for the link. See MDN.. Type: HTMLAttributeAnchorTarget. Default: NA.
\item \bold{rel}. The relationship between the linked resource and the current page. See MDN.. Type: string. Default: NA.
\item \bold{download}. Causes the browser to download the linked URL. A string may be provided to suggest a file name. See MDN.. Type: boolean | string. Default: NA.
\item \bold{ping}. A space-separated list of URLs to ping when the link is followed. See MDN.. Type: string. Default: NA.
\item \bold{referrerPolicy}. How much of the referrer to send when following the link. See MDN.. Type: HTMLAttributeReferrerPolicy. Default: NA.
\item \bold{shouldSelectOnPressUp}. Whether the tab selection should occur on press up instead of press down.. Type: boolean. Default: NA.
}
}
\examples{
library(shiny)
library(shinyNextUI)

items <- tagList(
  tab(
    key = 1,
    title = div(
      class = "flex items-center gap-1",
      icon("home"),
      "Tab 1"
    ),
    card(
      card_body(
        "Lorem ipsum dolor sit amet, consectetur adipiscing elit,
          sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.
          Ut enim ad minim veniam, quis nostrud exercitation ullamco
          laboris nisi ut aliquip ex ea commodo consequat."
      )
    )
  ),
  tab(
    key = 2,
    title = "Tab 2",
    card(
      card_body(
        "Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris
          nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur."
      )
    )
  ),
  tab(
    key = 3,
    title = "Tab 3",
    card(
      card_body(
        "Excepteur sint occaecat cupidatat non proident, sunt in culpa qui
          officia deserunt mollit anim id est laborum."
      )
    )
  )
)

ui <- nextui_page(
  debug_react = TRUE,
  p(class = "font-extrabold text-2xl uppercase", "Simple tabs"),
  tabs(
    inputId = "tabs1",
    disabledKeys = "2",
    items
  ),
  spacer(y = 2),
  select_input(
    "select",
    label = "Tab to select:",
    value = "1",
    select_item(key = 1, value = "1", "1"),
    select_item(key = 3, value = "3", "3")
  ),
  p("Selected tab is:", textOutput("active_tab", inline = TRUE)),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Tab size"),
  lapply(sizes, function(size) {
    tagList(
      p(class = "", sprintf("Size: \%s", size)),
      tabs(
        inputId = sprintf("tabs-\%s", size),
        size = size,
        items
      )
    )
  }),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Tab variants"),
  lapply(tabs_variants, function(variant) {
    tagList(
      p(sprintf("Variant: \%s", variant)),
      tabs(
        inputId = sprintf("tabs-\%s", variant),
        variant = variant,
        items
      )
    )
  }),
  spacer(y = 5),
  divider(),
  p(class = "font-extrabold text-2xl uppercase", "Tab color"),
  lapply(colors, function(color) {
    tagList(
      p(class = "", sprintf("Color: \%s", color)),
      tabs(
        inputId = sprintf("tabs-\%s", color),
        variant = "bordered",
        color = color,
        items
      )
    )
  })
)

server <- function(input, output, session) {
  output$active_tab <- renderText(input$tabs1)
  observeEvent(input$select, {
    update_tabs(session, inputId = "tabs1", value = input$select)
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/tabs}.
}
