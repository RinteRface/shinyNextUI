% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{collapse}
\alias{collapse}
\alias{collapse_panel}
\alias{update_collapse_panel}
\alias{collapse_option}
\alias{collapse_group}
\title{collapse}
\usage{
collapse_panel(inputId, ..., value = default_value)

update_collapse_panel(
  session = shiny::getDefaultReactiveDomain(),
  inputId,
  ...
)

collapse_option(...)

collapse_group(inputId, ..., choices = choices, selected = NULL)
}
\arguments{
\item{inputId}{ID of the component.}

\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}

\item{choices}{Slot for \link{collapse_option}. Wrap inside
tagList.}

\item{selected}{Default selected choice.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
The update functions return nothing (called for side effects).
}
\description{
Collapse display a list of high-level options that can expand/collapse to reveal more information.
}
\details{
\enumerate{
\item Collapse Props
\itemize{
\item \bold{expanded}. Manage the expand behaivor by prop. Type: boolean. Default: false.
\item \bold{title}. Collapse title content. Type: string React.ReactNode. Default: NA.
\item \bold{subtitle}. Collapse description content. Type: string React.ReactNode. Default: NA.
\item \bold{divider}. Show or hide the collapse divider. Type: boolean. Default: true.
\item \bold{disabled}. Disable collapse. Type: boolean. Default: false.
\item \bold{bordered}. Bordered collapse. Type: boolean. Default: false.
\item \bold{shadow}. Enable or disable the collapse shadow. Type: boolean. Default: false.
\item \bold{animated}. Enable or disable the collapse animation. Type: boolean. Default: true.
\item \bold{showArrow}. Show or hide the collapse right arrow. Type: boolean. Default: true.
\item \bold{arrowIcon}. Collapse arrow icon. Type: React.ReactNode. Default: NA.
\item \bold{contentLeft}. Left content for the collapse. Type: React.ReactNode. Default: NA.
\item \bold{borderWeight}. Border weight for bordered collapse. Type: NormalWeights. Default: light.
\item \bold{index}. Collapse's index, this value it's autogenerated by default. Type: number. Default: NA.
\item \bold{preventDefault}. Prevent default event on when is selected through the Space, Enter keys. Type: boolean. Default: true.
\item \bold{onChange}. Callback fired when the value is changed. Type: (e: React.ChangeEvent, index:number, value: boolean) => void. Default: NA.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: div.
\item \bold{...}. Div native props. Type: HTMLAttributes. Default: NA.
}
\item Collapse Group Props
\itemize{
\item \bold{accordion}. Expand children collapse like an accordion. Type: boolean. Default: true.
\item \bold{animated}. Enable or disable the collapse group animation. Type: boolean. Default: true.
\item \bold{bordered}. Bordered collapse group. Type: boolean. Default: false.
\item \bold{splitted}. Separated collapse group. Type: boolean. Default: false.
\item \bold{shadow}. Enable or disable the collapse group shadow. Type: boolean. Default: false.
\item \bold{divider}. Show or hide the collapse group children divider. Type: boolean. Default: NA.
\item \bold{borderWeight}. Border weight for bordered collapse group. Type: NormalWeights. Default: light.
\item \bold{onChange}. Callback fired when a collapse children value is changed. Type: (index:number, value: boolean) => void. Default: NA.
\item \bold{css}. Override Default CSS style. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs. Type: keyof JSX.IntrinsicElements. Default: div.
\item \bold{...}. Div native props. Type: HTMLAttributes. Default: NA.
}
}
}
\note{
\link{update_collapse_panel} currently does not work.

For \link{collapse_group}, the inputId gives the index
of the currently opened item. For \link{collapse} inputId,
indicates FALSE when closed and TRUE when the item is
uncollapsed.
}
\examples{
library(shiny)
library(shinyNextUI)

ui <- nextui_page(
  grid_container(
    gap = 2,
    xs = 12,
    grid(
      action_button("toggle_panel1", "Toggle panel 1"),
      spacer(y = 1),
      collapse_panel(
        inputId = "collapse_panel1",
        bordered = TRUE,
        shadow = TRUE,
        title = "Title",
        subtitle = "Subtitle",
        "Content"
      )
    ),
    grid(
      collapse_panel(
        inputId = "collapse_panel2",
        bordered = TRUE,
        shadow = TRUE,
        title = "Disabled panel",
        subtitle = "Subtitle",
        "Content",
        disabled = TRUE
      )
    ),
    grid(
      collapse_panel(
        inputId = "collapse_panel3",
        bordered = TRUE,
        shadow = TRUE,
        title = "Collapsible panel",
        subtitle = "Subtitle",
        showArrow = FALSE,
        borderWeight = "bold",
        contentLeft = tagList(
          avatar(
            src = "https://i.pravatar.cc/150?u=a042581f4e25056704b",
            size = "lg"
          )
        ),
        text(
          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut
          enim ad minim veniam, quis nostrud exercitation ullamco laboris
          nisi ut aliquip ex ea commodo consequat."
        )
      )
    ),
    spacer(y = 1),
    text("Accordion"),
    grid(
      collapse_group(
        inputId = "collapse_group",
        accordion = TRUE,
        bordered = TRUE,
        shadow = TRUE,
        diver = TRUE,
        choices = tagList(
          collapse_option(
            title = "Title 1",
            subtitle = "Subtitle",
            "Blabla"
          ),
          collapse_option(title = "2", "Test 2")
        )
      )
    )
  )
)

server <- function(input, output, session) {
  observe({
    print(input$collapse_panel1)
    print(input$collapse_group)
  })
  observeEvent(input$toggle_panel1, {
    # Issue: this does not trigger onChange on the JS side ...
    # so the input value does not change. Maybe a bug
    # on the nextUI side.
    update_collapse_panel(
      inputId = "collapse_panel1",
      expanded = !input$collapse_panel1
    )
  })
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/collapse}.
}
