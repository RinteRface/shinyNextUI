% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/doc.R, R/inputs.R
\name{dropdown}
\alias{dropdown}
\alias{dropdow_menu}
\alias{dropdown_trigger}
\alias{dropdown_item}
\alias{dropdown_section}
\alias{update_dropdown}
\title{dropdown}
\usage{
dropdown(...)

dropdow_menu(inputId, ..., value = default_value)

dropdown_trigger(...)

dropdown_item(...)

dropdown_section(...)

update_dropdown(session = shiny::getDefaultReactiveDomain(), inputId, ...)
}
\arguments{
\item{...}{Props to pass to the component.
The allowed props are listed below in the \bold{Details} section.}

\item{inputId}{ID of the component.}

\item{value}{Starting value.}

\item{session}{Object passed as the \code{session} argument to Shiny server.}
}
\value{
Object with \code{shiny.tag} class suitable for use in the UI of a Shiny app.
}
\description{
Displays a list of actions or options that a user can choose. Dropdown implementation is based on
\code{react-aria/menu}
}
\details{
\enumerate{
\item Dropdown Props
\itemize{
\item \bold{children*}. The content of the dropdown. It's usually the Dropdown.Trigger, Dropdown.Button and Dropdown.Menu.. Type: ReactNode[]. Default: NA.
\item \bold{type}. The type of dropdown menu that the dropdown trigger opens.. Type: TriggerType. Default: menu.
\item \bold{trigger}. How the dropdown menu is triggered.. Type: MenuTriggerType. Default: press.
\item \bold{closeOnSelect}. Whether the dropdown menu closes when a selection is made.. Type: boolean. Default: true.
\item \bold{isDisabled}. Whether dropdown trigger is disabled.. Type: boolean. Default: false.
\item \bold{disableTriggerPressedAnimation new}. Whether the trigger should show a pressed animation when the menu is open.. Type: boolean. Default: false.
\item \bold{PopoverProps}. Since dropdown is based on the Popover you can use any of the Popover props.. Type: PopoverProps. Default: NA.
}
\item Dropdown Events
\itemize{
\item \bold{PopoverEvents}. Since dropdown is based on the Popover you can use any of the Popover events.. Type: PopoverEvents. Default: NA.
}
\item Dropdown.Trigger Props
\itemize{
\item \bold{children*}. The dropdown trigger component, ensure the children passed is focusable. Users can tab to it using their keyboard, and it can take a ref. It is critical for accessiblity.. Type: ReactNode. Default: NA.
}
\item Dropdown.Button Props
\itemize{
\item \bold{ButtonProps}. Since dropdown button is based on the Button you can use any of the Button props.. Type: ButtonProps. Default: NA.
}
\item Dropdown.Menu Props
\itemize{
\item \bold{children*}. The contents of the collection. It's usually the Dropdown.Item or Dropdown.Section.. Type: CollectionChildrentype. Default: NA.
\item \bold{items}. Item objects in the collection.. Type: Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{selectedKeys}. The currently selected keys in the collection (controlled).. Type: all Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{defaultSelectedKeys}. The initial selected keys in the collection (uncontrolled).. Type: all Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{disabledKeys}. The item keys that are disabled. These items cannot be selected, focused, or otherwise interacted with.. Type: Iterable\if{html}{\out{<T>}}. Default: NA.
\item \bold{selectionMode}. The type of selection that is allowed in the collection.. Type: SelectionModeType. Default: NA.
\item \bold{keyboardDelegate}. An optional keyboard delegate implementation for type to select, to override the default.. Type: KeyboardDelegateType. Default: NA.
\item \bold{color}. The dropdown menu items color. Type: SimpleColors. Default: default.
\item \bold{textColor}. The dropdown menu items text color. Type: SimpleColors. Default: default.
\item \bold{variant}. The dropdown menu items variantion. Type: DropdownVariant. Default: flat.
\item \bold{isVirtualized}. Whether the dropdown menu uses virtual scrolling.. Type: boolean. Default: false.
\item \bold{disallowEmptySelection}. Whether the collection allows empty selection.. Type: boolean. Default: false.
\item \bold{autoFocus}. Where the focus should be set.. Type: boolean FocusStrategyType. Default: false.
\item \bold{shouldFocusWrap}. Whether keyboard navigation is circular.. Type: boolean. Default: false.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{containerCss new}. Override the dropdown mmenu container (Popover.Content) CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: ul.
}
\item Dropdown.Menu Events
\itemize{
\item \bold{onAction}. Handler that is called when an item is selected.. Type: (key: Key) => void. Default: NA.
\item \bold{onSelectionChange}. Handler that is called when the selection changes.. Type: (keys:SelectionType) => any. Default: NA.
}
\item Dropdown.Menu Accessibility Props
\itemize{
\item \bold{id}. The element's unique identifier. See MDN. Type: string. Default: NA.
\item \bold{aria-label}. Defines a string value that labels the current element. Type: string. Default: NA.
\item \bold{aria-labelledby}. Identifies the element (or elements) that labels the current element. Type: string. Default: NA.
\item \bold{aria-describedby}. Identifies the element (or elements) that describes the object.. Type: string. Default: NA.
\item \bold{aria-details}. Identifies the element (or elements) that provide a detailed, extended description for the object.. Type: string. Default: NA.
}
\item Dropdown.Item Props
\itemize{
\item \bold{key}. The unique key for the menu item.. Type: Key. Default: false.
\item \bold{description}. Description text element inside the dropdown menu item.. Type: string. Default: NA.
\item \bold{command}. Right-aligned label text content, useful for displaying hotkeys.. Type: string. Default: NA.
\item \bold{icon}. The icon to render before the dropdown menu item's label.. Type: ReactNode. Default: NA.
\item \bold{dividerWeight}. The dropdown item divider height. Type: NormalWeights. Default: light.
\item \bold{color}. The dropdown item color. Type: SimpleColors. Default: default.
\item \bold{textColor}. The dropdown item text color. Type: SimpleColors. Default: default.
\item \bold{variant}. The dropdown item variation. Type: DropdownVariant. Default: flat.
\item \bold{withDivider}. Whether the dropdown item should have a border on top. Type: boolean. Default: false.
\item \bold{showFullDescription new}. Whether the item description should be truncated or not.. Type: boolean. Default: false.
\item \bold{css}. Override Default CSS style.. Type: Stitches.CSS. Default: NA.
\item \bold{as}. Changes which tag component outputs.. Type: keyof JSX.IntrinsicElements. Default: li.
}
\item Dropdown.Item Accessibility Props
\itemize{
\item \bold{aria-label}. A screen reader only label for the dropdown menu item.. Type: string. Default: NA.
}
\item Dropdown.Section Props
\itemize{
\item \bold{heading}. The heading for the section.. Type: ReactNode. Default: NA.
}
\item Dropdown.Section Accessibility Props
\itemize{
\item \bold{aria-label}. An accessibility label for the section. Required if heading is not present.. Type: string. Default: NA.
}
}
}
\note{
Container for related \link{dropdown_item}.
}
\examples{
library(shiny)
library(shinyNextUI)
library(shiny.react)

items <- lapply(1:8, function(i) {
  dropdown_item(
    key = i,
    description = sprintf("Description \%s", i),
    sprintf("Item \%s", i)
  )
})

color <- "success"

ui <- nextui_page(
  debug_react = TRUE,
  div(
    class = "flex gap-2 my-2",
    dropdown(
      dropdown_trigger(
        button(
          "Trigger",
          color = color
        )
      ),
      dropdow_menu(
        inputId = "dropdown",
        color = color,
        disabledKeys = JS("['3', '4']"),
        selectionMode = "multiple",
        items,
        dropdown_section(
          dropdown_item(key = 9, "Item 9")
        )
      )
    )
  ),
  verbatimTextOutput("dropdown_val")
)

server <- function(input, output, session) {
  observe({
    print(input$dropdown)
  })
  output$dropdown_val <- renderText(input$dropdown)
}

if (interactive() || is_testing()) shinyApp(ui, server)
}
\seealso{
See \url{https://nextui.org/docs/components/dropdown}.
}
