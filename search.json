[{"path":"https://rinterface.github.io/shinyNextUI/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 shinyNextUI authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Granjon. Author, maintainer.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Granjon D (2025). shinyNextUI: NextUI Library Shiny. R package version 0.0.0.9000, https://rinterface.github.io/shinyNextUI/.","code":"@Manual{,   title = {shinyNextUI: NextUI Library for Shiny},   author = {David Granjon},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://rinterface.github.io/shinyNextUI/}, }"},{"path":"https://rinterface.github.io/shinyNextUI/index.html","id":"shinynextui","dir":"","previous_headings":"","what":"NextUI Library for Shiny","title":"NextUI Library for Shiny","text":"goal shinyNextUI provide wrapper around HeroUI React library.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/index.html","id":"notes","dir":"","previous_headings":"","what":"Notes","title":"NextUI Library for Shiny","text":"shinyNextUI currently alpha. Please carefully look current issues. current roadmap: Provide aliases match Shiny’s vanilla notations like selectInput, … Refine navbar template. Allow dynamically create themes. shinyNextUI leverages tailwind css rules already pre-compiled use various examples. need custom styles, can use {windy} package.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/index.html","id":"demo","dir":"","previous_headings":"","what":"Demo","title":"NextUI Library for Shiny","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  shinyAppDir(system.file(\"showcase\", package = \"shinyNextUI\"))"},{"path":"https://rinterface.github.io/shinyNextUI/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"NextUI Library for Shiny","text":"can install development version shinyNextUI GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"RinteRface/shinyNextUI\")"},{"path":"https://rinterface.github.io/shinyNextUI/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"NextUI Library for Shiny","text":"quickly get started example:","code":"library(shinyNextUI) # Get all examples get_examples() # Select an example and run the app run_example(\"card\")"},{"path":"https://rinterface.github.io/shinyNextUI/index.html","id":"developer","dir":"","previous_headings":"","what":"Developer","title":"NextUI Library for Shiny","text":"shinyNextUI leverages tailwind CSS management webpack JS bundler mix shiny.react reactR components input management. Within js folder, run npm install. , change:","code":"# Update CSS npx tailwindcss -i ./src/input.css -o ./src/output.css --watch  # Change JS files yarn webpack"},{"path":"https://rinterface.github.io/shinyNextUI/reference/accordion.html","id":null,"dir":"Reference","previous_headings":"","what":"accordion — accordion","title":"accordion — accordion","text":"Accordion display list high-level options can expand/collapse reveal information.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/accordion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"accordion — accordion","text":"","code":"accordion(inputId, ..., value = default_value)  accordion_item(...)  update_accordion(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/accordion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"accordion — accordion","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/accordion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"accordion — accordion","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/accordion.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"accordion — accordion","text":"children. Type: ReactNode | ReactNode[]. Default: NA. variant. Type: light | shadow | bordered | splitted. Default: \"light\". selectionMode. Type: none | single | multiple. Default: NA. selectionBehavior. Type: toggle | replace. Default: \"toggle\". isCompact. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. showDivider. Type: boolean. Default: true. dividerProps. Type: DividerProps. Default: NA. hideIndicator. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. disableIndicatorAnimation. Type: boolean. Default: false. disallowEmptySelection. Type: boolean. Default: false. keepContentMounted. Type: boolean. Default: false. fullWidth. Type: boolean. Default: true. motionProps. Type: MotionProps. Default: NA. disabledKeys. Type: React.Key[]. Default: NA. itemClasses. Type: AccordionItemClassnames. Default: NA. selectedKeys. Type: | React.Key[]. Default: NA. defaultSelectedKeys. Type: | React.Key[]. Default: NA. onSelectionChange. Type: (keys: \"\" | Set<React.Key>) => . Default: NA. children. Type: ReactNode. Default: NA. title. Type: ReactNode. Default: NA. subtitle. Type: ReactNode. Default: NA. indicator. Type: IndicatorProps. Default: NA. startContent. Type: ReactNode. Default: NA. motionProps. Type: MotionProps. Default: NA. isCompact. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. keepContentMounted. Type: boolean. Default: false. hideIndicator. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. disableIndicatorAnimation. Type: boolean. Default: false. HeadingComponent. Type: React.ElementType. Default: \"h2\". classNames. Type: AccordionItemClassnames. Default: NA. onFocus. Type: (e: FocusEvent) => void. Default: NA. onBlur. Type: (e: FocusEvent) => void. Default: NA. onFocusChange. Type: (isFocused: boolean) => void. Default: NA. onKeyDown. Type: (e: KeyboardEvent) => void. Default: NA. onKeyUp. Type: (e: KeyboardEvent) => void. Default: NA. onPress. Type: (e: PressEvent) => void. Default: NA. onPressStart. Type: (e: PressEvent) => void. Default: NA. onPressEnd. Type: (e: PressEvent) => void. Default: NA. onPressChange. Type: (isPressed: boolean) => void. Default: NA. onPressUp. Type: (e: PressEvent) => void. Default: NA. onClick. Type: MouseEventHandler. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/accordion.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"accordion — accordion","text":"","code":"library(shiny) #>  #> Attaching package: ‘shiny’ #> The following objects are masked from ‘package:shinyNextUI’: #>  #>     actionButton, updateActionButton library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   debug_react = TRUE,   p(class = \"font-extrabold text-2xl uppercase\", \"accordion()\"),   accordion(     inputId = \"accordion1\",     value = \"2\",     accordion_item(       startContent = avatar(         isBordered = TRUE,         color = \"primary\",         radius = \"lg\",         src = \"https://i.pravatar.cc/150?u=a042581f4e29026024d\"       ),       onPress = JS(\"(e) => alert('Your pressed me')\"),       \"plop\",       title = \"Element 1\",       key = \"1\",       subtitle = \"subtitle\"     ),     accordion_item(\"plop\", title = \"Element 2\", key = \"2\")   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"shadow variant accordion()\"),   accordion(     inputId = \"accordion2\",     isCompact = TRUE,     variant = \"shadow\",     value = \"3\",     accordion_item(\"plop\", title = \"Element 1\", key = \"1\", subtitle = \"subtitle\"),     accordion_item(\"plop\", title = \"Element 2\", key = \"2\"),     accordion_item(\"plop\", title = \"Element 3\", key = \"3\")   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"bordered variant accordion()\"),   accordion(     inputId = \"accordion3\",     isCompact = TRUE,     variant = \"bordered\",     accordion_item(\"plop\", title = \"Element 1\", key = \"1\", subtitle = \"subtitle\"),     accordion_item(\"plop\", title = \"Element 2\", key = \"2\")   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"splitted variant accordion()\"),   accordion(     inputId = \"accordion4\",     isCompact = TRUE,     variant = \"splitted\",     motionProps= JS(       '{       variants: {         enter: {           y: 0,           opacity: 1,           height: \"auto\",           transition: {             height: {               type: \"spring\",               stiffness: 500,               damping: 30,               duration: 1,             },             opacity: {               easings: \"ease\",               duration: 1,             },           },         },         exit: {           y: -10,           opacity: 0,           height: 0,           transition: {             height: {               easings: \"ease\",               duration: 0.25,             },             opacity: {               easings: \"ease\",               duration: 0.3,             },           },         },       },     }'),     value = \"2\",     accordion_item(\"plop\", title = \"Element 1\", key = \"1\", subtitle = \"subtitle\"),     accordion_item(\"plop\", title = \"Element 2\", key = \"2\")   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"Update accordion\"),   select_input(     \"select\",     label = \"Accordion to open:\",     select_item(key = 1, value = \"1\", \"1\"),     select_item(key = 2, value = \"2\", \"2\")   ),   spacer(y = 2),   accordion(     inputId = \"accordion5\",     isCompact = TRUE,     variant = \"bordered\",     accordion_item(\"plop1\", title = \"Element 1\", key = \"1\", subtitle = \"subtitle\"),     accordion_item(\"plop2\", title = \"Element 2\", key = \"2\")   ) )  server <- function(input, output, session) {   observeEvent(input$select, {     update_accordion(       session,       \"accordion5\",       value = input$select     )   })   observe(     print(input$accordion1)   ) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/autocomplete.html","id":null,"dir":"Reference","previous_headings":"","what":"autocomplete — autocomplete","title":"autocomplete — autocomplete","text":"autocomplete combines text input listbox, allowing users filter list options items matching query.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/autocomplete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"autocomplete — autocomplete","text":"","code":"autocomplete(inputId, ..., value = default_value)  autocomplete_section(...)  autocomplete_item(...)  update_autocomplete(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/autocomplete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"autocomplete — autocomplete","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/autocomplete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"autocomplete — autocomplete","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/autocomplete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"autocomplete — autocomplete","text":"Autocomplete Props children*. Type: ReactNode[]. Default: NA. label. Type: ReactNode. Default: NA. name. Type: string. Default: NA. variant. Type: flat | bordered | faded | underlined. Default: \"flat\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: NA. items. Type: Iterable<T>. Default: NA. defaultItems. Type: Iterable<T>. Default: NA. inputValue. Type: string. Default: NA. defaultInputValue. Type: string. Default: NA. allowsCustomValue. Type: boolean. Default: false. allowsEmptyCollection. Type: boolean. Default: true. shouldCloseOnBlur. Type: boolean. Default: true. placeholder. Type: string. Default: NA. description. Type: ReactNode. Default: NA. menuTrigger. Type: focus | input | manual. Default: \"focus\". labelPlacement. Type: inside | outside | outside-left. Default: \"inside\". selectedKey. Type: React.Key. Default: NA. defaultSelectedKey. Type: React.Key. Default: NA. disabledKeys. Type: | React.Key[]. Default: NA. errorMessage. Type: ReactNode | ((v: ValidationResult) => ReactNode). Default: NA. validate. Type: (value: { inputValue: string, selectedKey: React.Key }) => ValidationError | true | null | undefined. Default: NA. validationBehavior. Type: native | aria. Default: \"native\". startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. autoFocus. Type: boolean. Default: false. defaultFilter. Type: (textValue: string, inputValue: string) => boolean. Default: NA. filterOptions. Type: Intl.CollatorOptions. Default: \" sensitivity: 'base'\". maxListboxHeight. Type: number. Default: \"256\". itemHeight. Type: number. Default: \"32\". isVirtualized. Type: boolean. Default: \"undefined\". isReadOnly. Type: boolean. Default: false. isRequired. Type: boolean. Default: false. isInvalid. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. fullWidth. Type: boolean. Default: true. selectorIcon. Type: ReactNode. Default: NA. clearIcon. Type: ReactNode. Default: NA. showScrollIndicators. Type: boolean. Default: true. scrollRef. Type: React.RefObject<HTMLElement>. Default: NA. inputProps. Type: InputProps. Default: NA. popoverProps. Type: PopoverProps. Default: NA. listboxProps. Type: ListboxProps. Default: NA. scrollShadowProps. Type: ScrollShadowProps. Default: NA. selectorButtonProps. Type: ButtonProps. Default: NA. clearButtonProps. Type: ButtonProps. Default: NA. isClearable. Type: boolean. Default: true. disableClearable. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: true. disableSelectorIconRotation. Type: boolean. Default: false. classNames. Type: Partial<Record<'base' | 'listboxWrapper' | 'listbox' | 'popoverContent' | 'endContentWrapper' | 'clearButton' | 'selectorButton', string>>. Default: NA. Autocomplete Events onOpenChange. Type: (isOpen: boolean, menuTrigger?: MenuTriggerAction) => void. Default: NA. onInputChange. Type: (value: string) => void. Default: NA. onSelectionChange. Type: (key: React.Key) => void. Default: NA. onFocus. Type: (e: FocusEvent<HTMLInputElement>) => void. Default: NA. onBlur. Type: (e: FocusEvent<HTMLInputElement>) => void. Default: NA. onFocusChange. Type: (isFocused: boolean) => void. Default: NA. onKeyDown. Type: (e: KeyboardEvent) => void. Default: NA. onKeyUp. Type: (e: KeyboardEvent) => void. Default: NA. onClose. Type: () => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/autocomplete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"autocomplete — autocomplete","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  animals <- list(   list(     label = \"Bulbasaur\",     value = \"bulbasaur\",     description = \"Blabla\",     avatar = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"   ),   list(     label = \"Pikachu\",     value = \"pikachu\",     description = \"Electric mouse\",     avatar = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\"   ) )  items <- lapply(animals, function(animal) {   autocomplete_item(     key = animal[[\"value\"]],     value = animal[[\"value\"]],     startContent = avatar(src = animal[[\"avatar\"]]),     animal[[\"label\"]]   ) })  ui <- nextui_page(   debug_react = TRUE,   action_button(\"update\", \"Update to Pikachu?\"),   spacer(y = 4),   autocomplete(     \"autocomplete\",     label = \"Select a pokemon\",     isRequired = TRUE,     value = \"bulbasaur\",     autocomplete_section(       title = \"Default pokemons\",       items     )   ),   textOutput(\"res\") )  server <- function(input, output, session) {   output$res <- renderText(input$autocomplete)   observeEvent(input$autocomplete, {     print(input$autocomplete)   })    observeEvent(input$update, {     update_autocomplete(session, \"autocomplete\", value = \"pikachu\")   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/avatar.html","id":null,"dir":"Reference","previous_headings":"","what":"avatar — avatar","title":"avatar — avatar","text":"Avatar component used represent user, displays profile picture, initials fallback icon.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/avatar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"avatar — avatar","text":"","code":"avatar(...)  avatar_group(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/avatar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"avatar — avatar","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/avatar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"avatar — avatar","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/avatar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"avatar — avatar","text":"src. Type: string. Default: NA. color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". radius. Type: none | sm | md | lg | full. Default: \"full\". size. Type: sm | md | lg. Default: \"md\". name. Type: string. Default: NA. icon. Type: ReactNode. Default: NA. fallback. Type: ReactNode. Default: NA. isBordered. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. isFocusable. Type: boolean. Default: false. showFallback. Type: boolean. Default: false. ImgComponent. Type: React.ElementType. Default: \"img\". imgProps. Type: ImgComponentProps. Default: NA. classNames. Type: Partial<Record<\"base\" | \"img\" | \"fallback\" | \"name\" | \"icon\", string>>. Default: NA. max. Type: number. Default: \"5\". total. Type: number. Default: NA. size. Type: AvatarProps['size']. Default: NA. color. Type: AvatarProps['color']. Default: NA. radius. Type: AvatarProps['radius']. Default: NA. isGrid. Type: boolean. Default: false. isDisabled. Type: boolean. Default: NA. isBordered. Type: boolean. Default: NA. renderCount. Type: (count: number) => ReactNode. Default: NA. classNames. Type: Partial<Record<\"base\" | \"count\", string>>. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/avatar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"avatar — avatar","text":"","code":"library(shiny) library(shinyNextUI)  avatar_config <- data.frame(   size = c(\"xs\", \"sm\", \"md\", \"lg\", \"xl\"),   src = c(     \"https://i.pravatar.cc/150?u=a042581f4e29026024d\",     \"https://i.pravatar.cc/150?u=a042581f4e29026704d\",     \"https://i.pravatar.cc/150?u=a04258114e29026702d\",     \"https://i.pravatar.cc/150?u=a048581f4e29026701d\",     \"https://i.pravatar.cc/150?u=a092581d4ef9026700d\"   ),   radius = c(rep(\"full\", 2), \"lg\", \"md\", \"sm\"),   disabled = c(rep(FALSE, 4), TRUE),   bordered = c(rep(TRUE, 3), rep(FALSE, 2)),   color = c(     \"primary\",     \"secondary\",     \"danger\",     \"success\",     \"warning\"   ),   fallback = rep(TRUE, 5) )  avatar_factory <- function(src, size, disabled, bordered, radius, color, fallback) {   avatar(     src = src,     size = size,     isDisabled = disabled,     isBordered = bordered,     radius = radius,     color = color,     showFallback = fallback   ) }  avatars <- purrr::pmap(avatar_config, avatar_factory)  ui <- nextui_page(   debug_react = TRUE,   class = \"container mx-auto px-4\",   p(\"avatar()\"),   spacer(y = 1),   div(     class = \"flex gap-3 items-center\",     avatars   ),   spacer(y = 2),   p(\"avatar_group()\"),   spacer(y = 1),   div(     class = \"flex\",     avatar_group(       isBordered = TRUE,       max = 3,       total = 10,       lapply(avatar_config$src, function(link) avatar(src = link))     )   ) )  server <- function(input, output, session) {}  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/badge.html","id":null,"dir":"Reference","previous_headings":"","what":"badge — badge","title":"badge — badge","text":"Badges used small numerical value status descriptor UI elements.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/badge.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"badge — badge","text":"","code":"badge(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/badge.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"badge — badge","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/badge.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"badge — badge","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/badge.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"badge — badge","text":"children. Type: ReactNode. Default: NA. content. Type: string | number | ReactNode. Default: NA. variant. Type: solid | flat | faded | shadow. Default: \"solid\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". shape. Type: circle | rectangle. Default: \"rectangle\". placement. Type: top-right | top-left | bottom-right | bottom-left. Default: \"top-right\". showOutline. Type: boolean. Default: true. disableOutline. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. isInvisible. Type: boolean. Default: false. isOneChar. Type: boolean. Default: false. isDot. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\"｜\"badge\", string>>. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/badge.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"badge — badge","text":"","code":"library(shiny) library(shinyNextUI)  badge_config <- data.frame(   size = c(rep(\"sm\", 2), rep(\"md\", 2), rep(\"lg\", 2)),   color = c(     \"default\",     \"primary\",     \"secondary\",     \"success\",     \"warning\",     \"danger\"   ),   disable_outline = c(rep(FALSE, 3), rep(TRUE, 3)) )  variants <- c(\"solid\", \"flat\", \"faded\", \"shadow\") placement <- c(\"top-right\", \"bottom-right\", \"top-left\", \"bottom-left\") shape <- c(\"rectangle\", \"circle\")  badge_factory <- function(size, color, disable_outline) {   badge(     class = \"mx-5\",     size = size,     color = color,     disableOutline = disable_outline,     content = 1,     avatar()   ) }  badges <- purrr::pmap(badge_config, badge_factory)  ui <- nextui_page(   p(class = \"font-extrabold text-2xl uppercase\", \"Badges\"),   div(     class = \"flex flex-row\",     badges   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"Badge content\"),   div(     class = \"flex flex-row\",     badge(       color = \"danger\",       content = \"New\",       placement = \"top-left\",       avatar(         bordered = TRUE,         squared = TRUE,         color = \"secondary\",         size = \"lg\",         src = \"https://i.pravatar.cc/300?u=a042581f4e29026707d\"       )     )   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"Solid variant\"),   div(     class = \"flex flex-row\",     badge(variant = \"solid\", color = \"success\", size = \"lg\", content = 5, avatar())   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"Flat variant\"),   div(     class = \"flex flex-row\",     badge(variant = \"flat\", color = \"success\", size = \"lg\", content = 5, avatar())   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"Faded variant\"),   div(     class = \"flex flex-row\",     badge(variant = \"faded\", color = \"success\", size = \"lg\", content = 5, avatar())   ),   spacer(y = 2),   p(class = \"font-extrabold text-2xl uppercase\", \"Shadow variant\"),   div(     class = \"flex flex-row\",     badge(variant = \"shadow\", color = \"success\", size = \"lg\", content = 5, avatar())   ) )  server <- function(input, output, session) {}  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/button.html","id":null,"dir":"Reference","previous_headings":"","what":"Action button — actionButton","title":"Action button — actionButton","text":"higher level wrapper action_button match vanilla's Shiny syntax parameters. higher level wrapper update_action_button match vanilla's Shiny syntax parameters. Buttons allow users perform actions choose single tap.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/button.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Action button — actionButton","text":"","code":"actionButton(inputId, label, icon = NULL, width = NULL, ...)  updateActionButton(   session = getDefaultReactiveDomain(),   inputId,   label = NULL,   icon = NULL )  button(...)  action_button(inputId, ..., value = default_value)  update_action_button(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/button.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Action button — actionButton","text":"inputId input slot used access value. label contents button link–usually text label, also use HTML, like image. icon optional icon() appear button. width used NextUI left compatibility. ... Named attributes applied button link. session session object passed function given shinyServer. Default getDefaultReactiveDomain(). value Starting value.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/button.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Action button — actionButton","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/button.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Action button — actionButton","text":"children. Type: ReactNode. Default: NA. variant. Type: solid | bordered | light | flat | faded | shadow | ghost. Default: \"solid\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: NA. startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. spinner. Type: ReactNode. Default: NA. spinnerPlacement. Type: start | end. Default: \"start\". fullWidth. Type: boolean. Default: false. isIconOnly. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. isLoading. Type: boolean. Default: false. disableRipple. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. onPress. Type: (e: PressEvent) => void. Default: NA. onPressStart. Type: (e: PressEvent) => void. Default: NA. onPressEnd. Type: (e: PressEvent) => void. Default: NA. onPressChange. Type: (isPressed: boolean) => void. Default: NA. onPressUp. Type: (e: PressEvent) => void. Default: NA. onKeyDown. Type: (e: KeyboardEvent) => void. Default: NA. onKeyUp. Type: (e: KeyboardEvent) => void. Default: NA. onClick. Type: MouseEventHandler. Default: NA. children. Type: ReactNode | ReactNode[]. Default: NA. variant. Type: solid | bordered | light | flat | faded | shadow | ghost. Default: \"solid\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: \"xl\". fullWidth. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/button.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Action button — actionButton","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   reactOutput(\"button\") )  server <- function(input, output, session) {   n_click <- reactiveVal(0)   observeEvent(input$clicked, {     n_click(n_click() + 1)   })    output$button <- renderReact({     action_button(       inputId = \"clicked\",       color = \"primary\",       shadow = TRUE,       sprintf(         \"Test Button. You clicked: %s times.\",         n_click()       )     )   })    exportTestValues(n_click = n_click()) }  if (interactive() || is_testing()) shinyApp(ui, server) library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   reactOutput(\"button\") )  server <- function(input, output, session) {   n_click <- reactiveVal(0)   observeEvent(input$clicked, {     n_click(n_click() + 1)   })    output$button <- renderReact({     action_button(       inputId = \"clicked\",       color = \"primary\",       shadow = TRUE,       sprintf(         \"Test Button. You clicked: %s times.\",         n_click()       )     )   })    exportTestValues(n_click = n_click()) }  if (interactive() || is_testing()) shinyApp(ui, server) library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   reactOutput(\"button\") )  server <- function(input, output, session) {   n_click <- reactiveVal(0)   observeEvent(input$clicked, {     n_click(n_click() + 1)   })    output$button <- renderReact({     action_button(       inputId = \"clicked\",       color = \"primary\",       shadow = TRUE,       sprintf(         \"Test Button. You clicked: %s times.\",         n_click()       )     )   })    exportTestValues(n_click = n_click()) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/card.html","id":null,"dir":"Reference","previous_headings":"","what":"card — card","title":"card — card","text":"Card container text, photos, actions context single subject.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/card.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"card — card","text":"","code":"card(...)  card_body(...)  card_header(...)  card_footer(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/card.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"card — card","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/card.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"card — card","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/card.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"card — card","text":"children. Type: ReactNode | ReactNode[]. Default: NA. shadow. Type: none | sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg. Default: \"lg\". fullWidth. Type: boolean. Default: false. isHoverable. Type: boolean. Default: false. isPressable. Type: boolean. Default: false. isBlurred. Type: boolean. Default: false. isFooterBlurred. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. disableRipple. Type: boolean. Default: false. allowTextSelectionOnPress. Type: boolean. Default: false. classNames. Type: Partial<Record<'base' | 'header' | 'body' | 'footer', string>>. Default: NA. onPress. Type: (e: PressEvent) => void. Default: NA. onPressStart. Type: (e: PressEvent) => void. Default: NA. onPressEnd. Type: (e: PressEvent) => void. Default: NA. onPressChange. Type: (isPressed: boolean) => void. Default: NA. onPressUp. Type: (e: PressEvent) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/card.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"card — card","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   div(     class = \"grid gap-4 grid-cols-3 grid-rows-3 m-5\",     card(card_body(\"Simple card without anything\")),     card(       variant = \"bordered\",       card_header(\"Card title\"),       divider(),       card_body(h1(\"Card body\")),       divider(),       card_footer(\"Card Footer\")     ),     card(       #isBlurred = TRUE,       isPressable = TRUE,       onPress = JS(\"() => alert('You pressed me')\"),       shadow = \"sm\",       className = \"border-none bg-background/60 dark:bg-default-100/50 max-w-[610px]\",       card_body(\"Press me!\")     )   ) )  server <- function(input, output, session) {  }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox-group.html","id":null,"dir":"Reference","previous_headings":"","what":"Checkbox group input — checkboxgroup_input","title":"Checkbox group input — checkboxgroup_input","text":"Checkbox group input","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox-group.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checkbox group input — checkboxgroup_input","text":"","code":"checkboxgroup_input(inputId, ..., choices, selected = NULL)  update_checkboxgroup_input(   session = shiny::getDefaultReactiveDomain(),   inputId,   ...,   choices = NULL,   selected = NULL )"},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox-group.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checkbox group input — checkboxgroup_input","text":"inputId Unique input id. ... Props. choices Radio choices. selected Default selected value. session Shiny session.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox-group.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Checkbox group input — checkboxgroup_input","text":"See https://nextui.org/docs/components/checkbox-group get list parameters pass ....","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox-group.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checkbox group input — checkboxgroup_input","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   debug_react = TRUE,   div(     class = \"flex flex-col gap-1\",     spacer(y = 2),     select_input(       \"select\",       label = \"Tab to select:\",       value = JS(\"['sydney']\"),       selectionMode = \"multiple\",       select_item(key = \"buenos-aires\", value = \"buenos-aires\", \"Buenos Aires\"),       select_item(key = \"sydney\", value = \"sydney\", \"Sydney\")     ),     checkboxgroup_input(       inputId = \"checkbox_group\",       label = \"Checkbox Group\",       choices = c(         \"buenos-aires\" = \"Buenos Aires\",         \"sydney\" = \"Sydney\"       ),       orientation = \"horizontal\",       color = \"secondary\"     ),     textOutput(\"checkbox_group_val\")   ) )  server <- function(input, output, session) {   observeEvent(input$select, {     update_checkboxgroup_input(session, \"checkbox_group\", selected = input$select)   }, ignoreNULL = FALSE)   output$checkbox_group_val <- renderText(input$checkbox_group) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox.html","id":null,"dir":"Reference","previous_headings":"","what":"checkbox — checkbox","title":"checkbox — checkbox","text":"Checkboxes allow users select multiple items list individual items, mark one individual item selected.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"checkbox — checkbox","text":"","code":"checkbox_input(inputId, ..., value = default_value)  update_checkbox_input(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"checkbox — checkbox","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"checkbox — checkbox","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"checkbox — checkbox","text":"children. Type: ReactNode. Default: NA. icon. Type: CheckboxIconProps. Default: NA. value. Type: string. Default: NA. name. Type: string. Default: NA. size. Type: sm | md | lg. Default: \"md\". color. Type: default | primary | secondary | success | warning | danger. Default: \"primary\". radius. Type: none | sm | md | lg | full. Default: NA. lineThrough. Type: boolean. Default: false. isSelected. Type: boolean. Default: NA. defaultSelected. Type: boolean. Default: NA. isRequired. Type: boolean. Default: false. isReadOnly. Type: boolean. Default: NA. isDisabled. Type: boolean. Default: false. isIndeterminate. Type: boolean. Default: NA. isInvalid. Type: boolean. Default: false. validationState. Type: valid | invalid. Default: NA. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\"｜ \"wrapper\"｜ \"icon\"｜ \"label\", string>>. Default: NA. onChange. Type: React.ChangeEvent<HTMLInputElement>. Default: NA. onValueChange. Type: (isSelected: boolean) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/checkbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"checkbox — checkbox","text":"","code":"library(shiny) library(shinyNextUI)  ui <- nextui_page(   div(     class = \"flex gap-1\",     action_button(\"update\", \"Toggle checkbox\"),     spacer(y = 2),     checkbox_input(       inputId = \"checkbox\",       value = TRUE,       \"My checkbox\",       isRounded = TRUE,       color = \"warning\",       lineThrough = TRUE     ),     textOutput(\"check_val\")   ) )  server <- function(input, output, session) {   output$check_val <- renderText(input$checkbox)   observeEvent(input$update, {     update_checkbox_input(session, \"checkbox\", value = !input$checkbox)   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/chip.html","id":null,"dir":"Reference","previous_headings":"","what":"chip — chip","title":"chip — chip","text":"Chip small block essential information represent input, attribute, action.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/chip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"chip — chip","text":"","code":"chip(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/chip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"chip — chip","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/chip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"chip — chip","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/chip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"chip — chip","text":"children. Type: ReactNode. Default: NA. variant. Type: solid | bordered | light | flat | faded | shadow | dot. Default: \"solid\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: \"full\". avatar. Type: ReactNode. Default: NA. startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. isDisabled. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\" | \"content\" | \"dot\" | \"avatar\" | \"closeButton\", string>>. Default: NA. onClose. Type: (e: PressEvent) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/chip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"chip — chip","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   div(     class = \"flex gap-2 my-2\",     chip(       id = \"plop\",       \"A chip\",       onClose = JS(\"(e) => {         var chipEl = e.target.offsetParent;         Shiny.setInputValue(chipEl.id, false);         $(chipEl).remove();       }\")     ),     chip(       \"A chip\",       color = \"success\",       size = \"lg\",       radius = \"sm\",       variant = \"flat\",       startContent = icon(\"home\"),       endContent = icon(\"bell\")     ),     chip(       avatar = avatar(name = \"JW\", src = \"https://i.pravatar.cc/300?u=a042581f4e29026709d\"),       \"hello\"     ),     reactOutput(\"modal\")   ) )  server <- function(input, output, session) {    modalVisible <- reactiveVal(FALSE)   observeEvent({     input$plop   }, {     if (!input$plop) modalVisible(TRUE)   })    observeEvent(input$modal_closed, {     modalVisible(FALSE)   })    output$modal <- renderReact({     modal(       scrollBehavior = input$scroll,       isOpen = modalVisible(),       size = \"sm\",       placement = \"top\",       modal_content(         modal_header(\"Congrats\"),         modal_body(           p(\"You closed me!\")         )       ),       onClose = JS(\"() => Shiny.setInputValue('modal_closed', true, {priority: 'event'})\")     )   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/circular-progress.html","id":null,"dir":"Reference","previous_headings":"","what":"circular-progress — circular_progress","title":"circular-progress — circular_progress","text":"Circular progress indicators utilized indicate undetermined wait period visually represent duration process.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/circular-progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"circular-progress — circular_progress","text":"","code":"circular_progress(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/circular-progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"circular-progress — circular_progress","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/circular-progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"circular-progress — circular_progress","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/circular-progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"circular-progress — circular_progress","text":"label. Type: ReactNode. Default: NA. size. Type: sm | md | lg. Default: \"md\". color. Type: default | primary | secondary | success | warning | danger. Default: \"primary\". value. Type: number. Default: NA. valueLabel. Type: ReactNode. Default: NA. minValue. Type: number. Default: \"0\". maxValue. Type: number. Default: \"100\". formatOptions. Type: Intl.NumberFormat. Default: \"style: 'percent'\". isIndeterminate. Type: boolean. Default: true. showValueLabel. Type: boolean. Default: true. strokeWidth. Type: number. Default: \"2\". isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'base'｜'svgWrapper'｜'svg'｜'track'｜'indicator'｜'value'｜'label', string>>. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/circular-progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"circular-progress — circular_progress","text":"","code":"library(shiny) library(shinyNextUI)  ui <- nextui_page(   dark_mode = TRUE,   div(     class = \"flex gap-4\",     card(       class = \"\",       card_body(         class = \"grid grid-cols-2 gap-4\",         circular_progress(           value = 3,           showValueLabel = TRUE,           strokeWidth = 4,           size = \"lg\",           minValue = 0,           maxValue = 150,           valueLabel = div(icon(\"battery-full\", class = \"mx-1\"), \"2%\"),           color = \"danger\"         ),         circular_progress(           value = 120,           showValueLabel = TRUE,           strokeWidth = 4,           size = \"lg\",           minValue = 0,           maxValue = 150,           valueLabel = div(icon(\"mobile-screen-button\", class = \"mx-1\"), \"80%\"),           color = \"success\"         )       )     )   ) )  server <- function(input, output, session) {  }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/code.html","id":null,"dir":"Reference","previous_headings":"","what":"code — code_block","title":"code — code_block","text":"Code component used display inline code.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"code — code_block","text":"","code":"code_block(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"code — code_block","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"code — code_block","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/code.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"code — code_block","text":"children. Type: ReactNode. Default: NA. size. Type: sm | md | lg. Default: \"sm\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". radius. Type: none | sm | md | lg | full. Default: \"sm\".","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"code — code_block","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   div(     class = \"flex gap-2 my-2\",     code_block(       size = \"lg\",       color = \"secondary\",       radius = \"full\",       \"npm install @nextui-org/react\"     )   ) )  server <- function(input, output, session) {  }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/component.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation template for remaining components — component","title":"Documentation template for remaining components — component","text":"Documentation template remaining components","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation template for remaining components — component","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation template for remaining components — component","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/createReactShinyInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a reactR shiny input element — createReactShinyInput","title":"Create a reactR shiny input element — createReactShinyInput","text":"used create custom react element R. Specifically radio checkboxgroup work shiny.react.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/createReactShinyInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a reactR shiny input element — createReactShinyInput","text":"","code":"createReactShinyInput(   inputId,   class,   default = NULL,   configuration = list(),   container = htmltools::tags$div,   dependencies = NULL )"},{"path":"https://rinterface.github.io/shinyNextUI/reference/createReactShinyInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a reactR shiny input element — createReactShinyInput","text":"inputId Unique input id. class Element class. Must match JavaScript class counterpart. default Default value. configuration Props. container Default container. dependencies Deps.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/createReactShinyInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a reactR shiny input element — createReactShinyInput","text":"list tags.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/custom_component.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation template for remaining components — custom_component","title":"Documentation template for remaining components — custom_component","text":"Documentation template remaining components","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/custom_component.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation template for remaining components — custom_component","text":"... Props pass component. allowed props listed Details section. motion Prop relation framer-motion react library.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/custom_component.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation template for remaining components — custom_component","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/divider.html","id":null,"dir":"Reference","previous_headings":"","what":"divider — divider","title":"divider — divider","text":"Divider component separates content page.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/divider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"divider — divider","text":"","code":"divider(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/divider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"divider — divider","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/divider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"divider — divider","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/divider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"divider — divider","text":"orientation. Type: `horizontal` | `vertical`. Default: \"horizontal\".","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/divider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"divider — divider","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   debug_react = TRUE,   card(     card_header(\"Header\"),     divider(),     card_body(\"Body\"),     divider(),     card_footer(\"Footer\")   ) )  server <- function(input, output, session) {  }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/drawer.html","id":null,"dir":"Reference","previous_headings":"","what":"drawer — drawer","title":"drawer — drawer","text":"Displays panel slides edge screen, containing supplementary content.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/drawer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"drawer — drawer","text":"","code":"drawer(...)  drawer_content(...)  drawer_header(...)  drawer_body(...)  drawer_footer(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/drawer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"drawer — drawer","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/drawer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"drawer — drawer","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/drawer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"drawer — drawer","text":"children. Type: ReactNode. Default: NA. size. Type: xs | sm | md | lg | xl | 2xl | 3xl | 4xl | 5xl | full. Default: \"md\". radius. Type: none | sm | md | lg. Default: \"lg\". placement. Type: left | right | top | bottom. Default: \"right\". isOpen. Type: boolean. Default: NA. defaultOpen. Type: boolean. Default: NA. isDismissable. Type: boolean. Default: true. isKeyboardDismissDisabled. Type: boolean. Default: false. shouldBlockScroll. Type: boolean. Default: true. hideCloseButton. Type: boolean. Default: false. closeButton. Type: ReactNode. Default: NA. motionProps. Type: MotionProps. Default: NA. portalContainer. Type: HTMLElement. Default: \"document.body\". disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'wrapper' | 'base' | 'backdrop' | 'header' | 'body' | 'footer' | 'closeButton', string>>. Default: NA. onOpenChange. Type: (isOpen: boolean) => void. Default: NA. onClose. Type: () => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/drawer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"drawer — drawer","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   action_button(     inputId = \"show_drawer\",     color = \"primary\",     shadow = TRUE,     \"Show drawer\"   ),   reactOutput(\"drawer\") )  server <- function(input, output, session) {   drawerVisible <- reactiveVal(FALSE)   observeEvent(input$show_drawer, {     drawerVisible(TRUE)   })    observeEvent(input$hide_drawer, {     drawerVisible(FALSE)   })    observeEvent(input$drawer_closed, {     drawerVisible(FALSE)   })    output$drawer <- renderReact({     drawer(       scrollBehavior = input$scroll,       isOpen = drawerVisible(),       size = \"sm\",       backdrop = \"transparent\",       placement = \"right\",       motionProps = JS(         \"{           variants: {             enter: {               opacity: 1,               x: 0,               duration: 10,             },             exit: {               x: 100,               opacity: 0,               duration: 10,             },           },         }\"       ),       drawer_content(         drawer_header(\"My drawer\"),         drawer_body(           p(             \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio,             dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta             ac consectetur ac, vestibulum at eros.\"           ),           p(             \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nullam pulvinar risus non risus hendrerit venenatis.             Pellentesque sit amet hendrerit risus, sed porttitor quam.             Magna exercitation reprehenderit magna aute tempor cupidatat             consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex             incididunt cillum quis. Velit duis sit officia eiusmod Lorem             aliqua enim laboris do dolor eiusmod. Et mollit incididunt             nisi consectetur esse laborum eiusmod pariatur proident Lorem             eiusmod et. Culpa deserunt nostrud ad veniam.\"           ),           p(             \"Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit              duis sit officia eiusmod Lorem aliqua enim laboris do dolor              eiusmod. Et mollit incididunt nisi consectetur esse laborum              eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt              nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur              adipiscing elit. Nullam pulvinar risus non risus hendrerit              venenatis. Pellentesque sit amet hendrerit risus, sed              porttitor quam. Magna exercitation reprehenderit magna aute              tempor cupidatat consequat elit dolor adipisicing. Mollit              dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit              officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et              mollit incididunt nisi consectetur esse laborum eiusmod              pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad              veniam.\"           ),           p(             \"Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit              duis sit officia eiusmod Lorem aliqua enim laboris do dolor              eiusmod. Et mollit incididunt nisi consectetur esse laborum              eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt              nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur              adipiscing elit. Nullam pulvinar risus non risus hendrerit              venenatis. Pellentesque sit amet hendrerit risus, sed              porttitor quam. Magna exercitation reprehenderit magna aute              tempor cupidatat consequat elit dolor adipisicing. Mollit              dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit              officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et              mollit incididunt nisi consectetur esse laborum eiusmod              pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad              veniam.\"           )         ),         drawer_footer(           action_button(             inputId = \"hide_drawer\",             color = \"danger\",             shadow = TRUE,             \"Close drawer\"           )         )       ),       onClose = JS(         \"() => Shiny.setInputValue('drawer_closed', true, {priority: 'event'})\"       )     )   })    exportTestValues(     drawer_state = drawerVisible()   ) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/dropdown.html","id":null,"dir":"Reference","previous_headings":"","what":"Dropdown menu — dropdow_menu","title":"Dropdown menu — dropdow_menu","text":"Dropdown menu","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/dropdown.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dropdown menu — dropdow_menu","text":"","code":"dropdow_menu(inputId, ..., choices = NULL, selected = NULL)  dropdown_item(...)  dropdown_section(...)  update_dropdown(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/dropdown.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dropdown menu — dropdow_menu","text":"inputId Unique input id. ... Props. choices Radio choices. selected Default selected value. session Shiny session.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/dropdown.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dropdown menu — dropdow_menu","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/dropdown.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Dropdown menu — dropdow_menu","text":"See https://nextui.org/docs/components/dropdown get list parameters pass ....","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/dropdown.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Dropdown menu — dropdow_menu","text":"Container related dropdown_item.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/dropdown.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dropdown menu — dropdow_menu","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  items <- list(   # Dropdown section   dropdown_section(     showDivider = TRUE,     title = \"Section 1\",     # Dropdown Items     list(       dropdown_item(         title = \"Item 1\",         shortcut = \"⌘N\",         color = \"danger\",         description = \"Item description\",         startContent = icon(\"clock\")       ),       dropdown_item(         title = \"Item 2\",         shortcut = \"⌘N\",         color = \"success\",         description = \"Item description\",         startContent = icon(\"home\")       ),       dropdown_item(         title = \"External link\",         href = \"https://nextui.org/\",         target = \"_blank\",         description = \"Go to nextui documentation\"       )     )   ),   dropdown_section(     showDivider = FALSE,     title = \"Section 2\",     # Dropdown Items     list(       dropdown_item(         title = \"Item 3\",         color = \"warning\",         description = \"Item description\"       ),       dropdown_item(         title = \"Item 4\"       )     )   ) )  # You can also skip section #items <- list( #  dropdown_item( #    title = \"Item 1\", #    shortcut = \"⌘N\", #    color = \"danger\", #    description = \"Item description\"#, #    #startContent = icon(\"clock\") #  ), #  dropdown_item( #    title = \"Item 2\", #    shortcut = \"⌘N\", #    color = \"success\", #    description = \"Item description\"#, #    #startContent = icon(\"home\") #  ) #)  ui <- nextui_page(   debug_react = TRUE,   div(     class = \"flex gap-2 my-2\",     dropdow_menu(       inputId = \"dropdown\",       label = \"Dropdown menu\",       selected = \"Item 2\",       variant = \"bordered\",       disabledKeys = c(\"Item 3\", \"Item 4\"),       selectionMode = \"multiple\",       choices = items     )   ),   verbatimTextOutput(\"dropdown_val\") )  server <- function(input, output, session) {   observe({     print(input$dropdown)   })   output$dropdown_val <- renderText(input$dropdown) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/get_examples.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all available Shiny app examples — get_examples","title":"Get all available Shiny app examples — get_examples","text":"Get available Shiny app examples","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/get_examples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all available Shiny app examples — get_examples","text":"","code":"get_examples()"},{"path":"https://rinterface.github.io/shinyNextUI/reference/get_examples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all available Shiny app examples — get_examples","text":"character vector.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/image.html","id":null,"dir":"Reference","previous_headings":"","what":"image — image","title":"image — image","text":"Image component used display images support fallback.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/image.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"image — image","text":"","code":"image(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/image.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"image — image","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/image.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"image — image","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/image.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"image — image","text":"src. Type: string. Default: NA. srcSet. Type: string. Default: NA. sizes. Type: string. Default: NA. alt. Type: string. Default: NA. width. Type: number. Default: NA. height. Type: number. Default: NA. radius. Type: none | sm | md | lg | full. Default: \"xl\". shadow. Type: none | sm | md | lg. Default: \"none\". loading. Type: eager | lazy. Default: NA. fallbackSrc. Type: string. Default: NA. isBlurred. Type: boolean. Default: false. isZoomed. Type: boolean. Default: false. removeWrapper. Type: boolean. Default: false. disableSkeleton. Type: boolean. Default: false. classNames. Type: Partial<Record<\"img\" | \"wrapper\" | \"zoomedWrapper\" | \"blurredImg\", string>>. Default: NA. onLoad. Type: ReactEventHandler<HTMLImageElement>. Default: NA. onError. Type: () => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/image.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"image — image","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   div(     class = \"flex gap-5 my-2\",     image(       width = 300,       alt = \"NextUI hero Image\",       src = \"https://heroui.com/images/hero-card-complete.jpeg\"     ),     image(       isBlurred = TRUE,       width = 300,       alt = \"Album cover\",       src = \"https://heroui.com/images/hero-card-complete.jpeg\"     ),     image(       isZoomed = TRUE,       width = 300,       alt = \"Fruit image with zoom effect\",       src = \"https://heroui.com/images/hero-card-complete.jpeg\"     )   ) )  server <- function(input, output, session) { }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/input.html","id":null,"dir":"Reference","previous_headings":"","what":"input — input","title":"input — input","text":"Input component allows users enter text. can used get user inputs forms, search fields, .","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/input.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"input — input","text":"","code":"text_input(inputId, ..., value = default_value)  update_text_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)  numeric_input(inputId, ..., value = default_value)  update_numeric_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)  date_input(inputId, ..., value = default_value)  update_date_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/input.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"input — input","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/input.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"input — input","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/input.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"input — input","text":"children. Type: ReactNode. Default: NA. variant. Type: flat | bordered | faded | underlined. Default: \"flat\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: NA. label. Type: ReactNode. Default: NA. value. Type: string. Default: NA. defaultValue. Type: string. Default: NA. placeholder. Type: string. Default: NA. description. Type: ReactNode. Default: NA. errorMessage. Type: ReactNode | ((v: ValidationResult) => ReactNode). Default: NA. validate. Type: (value: string) => ValidationError | true | null | undefined. Default: NA. validationBehavior. Type: native | aria. Default: \"native\". minLength. Type: number. Default: NA. maxLength. Type: number. Default: NA. pattern. Type: string. Default: NA. type. Type: text | email | url | password | tel | search | file. Default: \"text\". startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. labelPlacement. Type: inside | outside | outside-left. Default: \"inside\". fullWidth. Type: boolean. Default: true. isClearable. Type: boolean. Default: false. isRequired. Type: boolean. Default: false. isReadOnly. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. isInvalid. Type: boolean. Default: false. baseRef. Type: RefObject<HTMLDivElement>. Default: NA. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'base' | 'label' | 'inputWrapper' | 'innerWrapper' | 'mainWrapper' | 'input' | 'clearButton' | 'helperWrapper' | 'description' | 'errorMessage', string>>. Default: NA. onChange. Type: React.ChangeEvent<HTMLInputElement>. Default: NA. onValueChange. Type: (value: string) => void. Default: NA. onClear. Type: () => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/input.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"input — input","text":"","code":"library(shiny) library(shinyNextUI)  ui <- nextui_page(   div(     class = \"flex gap-1\",     text_input(       inputId = \"text\",       value = \"Plop\",       placeholder = \"Next UI\",       label = \"Text input\"     ),     textOutput(\"text_val\")   ),   spacer(y = 5),   div(     class = \"flex gap-1\",     numeric_input(       inputId = \"numeric\",       value = 10,       label = \"Numeric input\"     ),     textOutput(\"numeric_val\")   ),   spacer(y = 5),   div(     class = \"flex gap-1\",     date_input(       inputId = \"date\",       value = \"2023-12-11\",       label = \"Date input\"     ),     textOutput(\"date_val\")   ) )  server <- function(input, output, session) {   output$text_val <- renderText(input$text)   output$numeric_val <- renderText(input$numeric)   output$date_val <- renderText(input$date) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/is_testing.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicates whether testthat is running — is_testing","title":"Indicates whether testthat is running — is_testing","text":"Indicates whether testthat running","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/is_testing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicates whether testthat is running — is_testing","text":"","code":"is_testing()"},{"path":"https://rinterface.github.io/shinyNextUI/reference/is_testing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicates whether testthat is running — is_testing","text":"Boolean.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/link.html","id":null,"dir":"Reference","previous_headings":"","what":"link — link","title":"link — link","text":"Links allow users click way page page. component styled resemble hyperlink semantically renders ","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/link.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"link — link","text":"","code":"link(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/link.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"link — link","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/link.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"link — link","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/link.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"link — link","text":"size. Type: sm | md | lg. Default: \"md\". color. Type: foreground | primary | secondary | success | warning | danger. Default: \"primary\". underline. Type: none | hover | always | active | focus. Default: \"none\". href. Type: string. Default: NA. target. Type: HTMLAttributeAnchorTarget. Default: NA. rel. Type: string. Default: NA. download. Type: boolean | string. Default: NA. ping. Type: string. Default: NA. referrerPolicy. Type: HTMLAttributeReferrerPolicy. Default: NA. isExternal. Type: boolean. Default: false. showAnchorIcon. Type: boolean. Default: false. anchorIcon. Type: ReactNode. Default: NA. isBlock. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. onPress. Type: (e: PressEvent) => void. Default: NA. onPressStart. Type: (e: PressEvent) => void. Default: NA. onPressEnd. Type: (e: PressEvent) => void. Default: NA. onPressChange. Type: (isPressed: boolean) => void. Default: NA. onPressUp. Type: (e: PressEvent) => void. Default: NA. onKeyDown. Type: (e: KeyboardEvent) => void. Default: NA. onKeyUp. Type: (e: KeyboardEvent) => void. Default: NA. onClick. Type: MouseEventHandler. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/link.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"link — link","text":"","code":"library(shiny) library(shinyNextUI)  colors <- c(   \"default\",   \"primary\",   \"secondary\",   \"success\",   \"warning\",   \"error\" )  link_config <- data.frame(   color = colors,   underline = c(rep(\"none\", 2), \"hover\", \"always\", \"active\", \"focus\"),   block = c(rep(TRUE, 3), rep(FALSE, 3)),   href = c(rep(\"#\", 3), rep(\"https://google.com\", 3)),   isExternal = c(rep(FALSE, 3), rep(TRUE, 3)),   size = rep(c(\"sm\", \"md\", \"lg\"), 2) )  link_factory <- function(color, underline, block, href, isExternal, size) {   link(     \"A super link!\",     color = color,     underline = underline,     isBlock = block,     href = href,     isExternal = isExternal,     size = size   ) }  links <- purrr::pmap(link_config, link_factory)  ui <- nextui_page(   div(     class = \"grid gap-4 grid-cols-3 grid-rows-2 m-5\",     links   ) )  server <- function(input, output, session) {}  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/listbox.html","id":null,"dir":"Reference","previous_headings":"","what":"listbox — listbox","title":"listbox — listbox","text":"listbox displays list options allows user select one .","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/listbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"listbox — listbox","text":"","code":"listbox(inputId, ..., value = default_value)  listbox_section(...)  listbox_item(...)  update_listbox(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/listbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"listbox — listbox","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/listbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"listbox — listbox","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/listbox.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"listbox — listbox","text":"children*. Type: ReactNode[]. Default: NA. items. Type: Iterable<T>. Default: NA. variant. Type: solid | bordered | light | flat | faded | shadow. Default: \"solid\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". selectionMode. Type: none | single | multiple. Default: NA. selectedKeys. Type: React.Key[]. Default: NA. disabledKeys. Type: React.Key[]. Default: NA. defaultSelectedKeys. Type: | React.Key[]. Default: NA. disallowEmptySelection. Type: boolean. Default: false. shouldHighlightOnFocus. Type: boolean. Default: false. autoFocus. Type: boolean | first | last. Default: false. topContent. Type: ReactNode. Default: NA. bottomContent. Type: ReactNode. Default: NA. emptyContent. Type: ReactNode. Default: \"items.\". shouldFocusWrap. Type: boolean. Default: false. isVirtualized. Type: boolean. Default: false. virtualization. Type: Record<\"maxListboxHeight\" & \"itemHeight\", number>. Default: NA. hideEmptyContent. Type: boolean. Default: false. hideSelectedIcon. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\" | \"list\" | \"emptyContent\", string>>. Default: NA. itemClasses. Type: Partial<Record<\"base\" | \"wrapper\" | \"title\" | \"description\" | \"selectedIcon\", string>>. Default: NA. onAction. Type: (key: React.Key) => void. Default: NA. onSelectionChange. Type: (keys: React.Key[]) => void. Default: NA. children*. Type: ReactNode. Default: NA. title. Type: string. Default: NA. items. Type: Iterable<T>. Default: NA. hideSelectedIcon. Type: boolean. Default: false. showDivider. Type: boolean. Default: false. dividerProps. Type: DividerProps. Default: NA. classNames. Type: Partial<Record<\"base\" | \"heading\" | \"group\" | \"divider\", string>>. Default: NA. itemClasses. Type: Partial<Record<\"base\" | \"wrapper\" | \"title\" | \"description\" | \"shortcut\" | \"selectedIcon\", string>>. Default: NA. children*. Type: ReactNode. Default: NA. key. Type: React.Key. Default: NA. title. Type: string | ReactNode. Default: NA. textValue. Type: string. Default: NA. description. Type: string | ReactNode. Default: NA. shortcut. Type: string | ReactNode. Default: NA. startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. selectedIcon. Type: ListboxItemSelectedIconProps. Default: NA. href. Type: string. Default: NA. target. Type: HTMLAttributeAnchorTarget. Default: NA. rel. Type: string. Default: NA. download. Type: boolean | string. Default: NA. ping. Type: string. Default: NA. referrerPolicy. Type: HTMLAttributeReferrerPolicy. Default: NA. shouldHighlightOnFocus. Type: boolean. Default: false. hideSelectedIcon. Type: boolean. Default: false. showDivider. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. isSelected. Type: boolean. Default: false. isReadOnly. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\" | \"wrapper\" | \"title\" | \"description\" | \"shortcut\" | \"selectedIcon\", string>>. Default: NA. onAction. Type: () => void. Default: NA. onPress. Type: (e: PressEvent) => void. Default: NA. onPressStart. Type: (e: PressEvent) => void. Default: NA. onPressEnd. Type: (e: PressEvent) => void. Default: NA. onPressChange. Type: (isPressed: boolean) => void. Default: NA. onPressUp. Type: (e: PressEvent) => void. Default: NA. onKeyDown. Type: (e: KeyboardEvent) => void. Default: NA. onKeyUp. Type: (e: KeyboardEvent) => void. Default: NA. onClick. Type: MouseEventHandler. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/listbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"listbox — listbox","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  animals <- list(   list(     label = \"Bulbasaur\",     value = \"bulbasaur\",     description = \"Blabla\",     avatar = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"   ),   list(     label = \"Pikachu\",     value = \"pikachu\",     description = \"Electric mouse\",     avatar = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\"   ) )  items <- lapply(animals, function(animal) {   listbox_item(     key = animal[[\"value\"]],     description = animal[[\"description\"]],     startContent = avatar(src = animal[[\"avatar\"]]),     animal[[\"label\"]]   ) })  ui <- nextui_page(   debug_react = TRUE,   spacer(y = 4),   action_button(\"update\", \"Update to Pikachu?\"),   spacer(y = 4),   div(     class = \"w-full max-w-[260px] border-small px-1 py-2     rounded-small border-default-200 dark:border-default-100\",     listbox(       \"listbox\",       label = \"Select a pokemon\",       value = \"bulbasaur\",       variant = \"flat\",       selectionMode = \"single\",       listbox_section(         title = \"Default pokemons\",         items       )     )   ),   textOutput(\"res\") )  server <- function(input, output, session) {   output$res <- renderText(input$listbox)   observeEvent(input$listbox, {     print(input$listbox)   })    observeEvent(input$update, {     update_listbox(session, \"listbox\", value = JS(\"['pikachu']\"))   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/modal.html","id":null,"dir":"Reference","previous_headings":"","what":"modal — modal","title":"modal — modal","text":"Displays dialog custom content requires attention provides additional information.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/modal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"modal — modal","text":"","code":"modal(...)  modal_content(...)  modal_header(...)  modal_body(...)  modal_footer(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/modal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"modal — modal","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/modal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"modal — modal","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/modal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"modal — modal","text":"children*. Type: ReactNode. Default: NA. size. Type: xs | sm | md | lg | xl | 2xl | 3xl | 4xl | 5xl | full. Default: \"md\". radius. Type: none | sm | md | lg. Default: \"lg\". shadow. Type: none | sm | md | lg. Default: \"lg\". backdrop. Type: transparent | opaque | blur. Default: \"opaque\". scrollBehavior. Type: normal | inside | outside. Default: \"normal\". placement. Type: auto | top | center | bottom. Default: \"auto\". isOpen. Type: boolean. Default: NA. defaultOpen. Type: boolean. Default: NA. isDismissable. Type: boolean. Default: true. isKeyboardDismissDisabled. Type: boolean. Default: false. shouldBlockScroll. Type: boolean. Default: true. hideCloseButton. Type: boolean. Default: false. closeButton. Type: ReactNode. Default: NA. motionProps. Type: MotionProps. Default: NA. portalContainer. Type: HTMLElement. Default: \"document.body\". disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'wrapper' | 'base' | 'backdrop' | 'header' | 'body' | 'footer' | 'closeButton', string>>. Default: NA. onOpenChange. Type: (isOpen: boolean) => void. Default: NA. onClose. Type: () => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/modal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"modal — modal","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   action_button(     inputId = \"show_modal\",     color = \"primary\",     shadow = TRUE,     \"Show modal\"   ),   radio_input(     \"scroll\",     label = \"Scroll option\",     choices = c(       \"inside\" = \"Inside\",       \"outside\" = \"Outside\"     ),     selected = \"inside\"   ),   reactOutput(\"modal\") )  server <- function(input, output, session) {   modalVisible <- reactiveVal(FALSE)   observeEvent(input$show_modal, {     modalVisible(TRUE)   })    observeEvent(input$modal_closed, {     modalVisible(FALSE)   })    output$modal <- renderReact({     modal(       scrollBehavior = input$scroll,       isOpen = modalVisible(),       size = \"sm\",       modal_content(         modal_header(\"My modal\"),         modal_body(           p(             \"Cras mattis consectetur purus sit amet fermentum. Cras justo odio,             dapibus ac facilisis in, egestas eget quam. Morbi leo risus, porta             ac consectetur ac, vestibulum at eros.\"           ),           p(             \"Lorem ipsum dolor sit amet, consectetur adipiscing elit.             Nullam pulvinar risus non risus hendrerit venenatis.             Pellentesque sit amet hendrerit risus, sed porttitor quam.             Magna exercitation reprehenderit magna aute tempor cupidatat             consequat elit dolor adipisicing. Mollit dolor eiusmod sunt ex             incididunt cillum quis. Velit duis sit officia eiusmod Lorem             aliqua enim laboris do dolor eiusmod. Et mollit incididunt             nisi consectetur esse laborum eiusmod pariatur proident Lorem             eiusmod et. Culpa deserunt nostrud ad veniam.\"           ),           p(             \"Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit              duis sit officia eiusmod Lorem aliqua enim laboris do dolor              eiusmod. Et mollit incididunt nisi consectetur esse laborum              eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt              nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur              adipiscing elit. Nullam pulvinar risus non risus hendrerit              venenatis. Pellentesque sit amet hendrerit risus, sed              porttitor quam. Magna exercitation reprehenderit magna aute              tempor cupidatat consequat elit dolor adipisicing. Mollit              dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit              officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et              mollit incididunt nisi consectetur esse laborum eiusmod              pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad              veniam.\"           ),           p(             \"Mollit dolor eiusmod sunt ex incididunt cillum quis. Velit              duis sit officia eiusmod Lorem aliqua enim laboris do dolor              eiusmod. Et mollit incididunt nisi consectetur esse laborum              eiusmod pariatur proident Lorem eiusmod et. Culpa deserunt              nostrud ad veniam. Lorem ipsum dolor sit amet, consectetur              adipiscing elit. Nullam pulvinar risus non risus hendrerit              venenatis. Pellentesque sit amet hendrerit risus, sed              porttitor quam. Magna exercitation reprehenderit magna aute              tempor cupidatat consequat elit dolor adipisicing. Mollit              dolor eiusmod sunt ex incididunt cillum quis. Velit duis sit              officia eiusmod Lorem aliqua enim laboris do dolor eiusmod. Et              mollit incididunt nisi consectetur esse laborum eiusmod              pariatur proident Lorem eiusmod et. Culpa deserunt nostrud ad              veniam.\"           )         ),         modal_footer(\"Modal footer\")       ),       onClose = JS(\"() => Shiny.setInputValue('modal_closed', true, {priority: 'event'})\")     )   })    exportTestValues(     modal_state = modalVisible()   ) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/navbar.html","id":null,"dir":"Reference","previous_headings":"","what":"navbar — navbar","title":"navbar — navbar","text":"responsive navigation header positioned top side page includes support branding, links, navigation, collapse menu .","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/navbar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"navbar — navbar","text":"","code":"navbar(...)  navbar_brand(...)  navbar_content(...)  navbar_item(...)  navbar_toggle(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/navbar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"navbar — navbar","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/navbar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"navbar — navbar","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/navbar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"navbar — navbar","text":"children*. Type: ReactNode[]. Default: NA. height. Type: string | number. Default: \"4rem (64px)\". position. Type: static | sticky. Default: \"sticky\". maxWidth. Type: sm | md | lg | xl | 2xl | full. Default: \"lg\". parentRef. Type: React.RefObject<HTMLElement>. Default: \"window\". isBordered. Type: boolean. Default: false. isBlurred. Type: boolean. Default: true. isMenuOpen. Type: boolean. Default: false. isMenuDefaultOpen. Type: boolean. Default: false. shouldHideOnScroll. Type: boolean. Default: false. motionProps. Type: MotionProps. Default: NA. disableScrollHandler. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'base' | 'wrapper' | 'brand' | 'content' | 'item' | 'toggle' | 'toggleIcon' | 'menu' | 'menuItem', string>>. Default: NA. onMenuOpenChange. Type: (isOpen: boolean) => void. Default: NA. onScrollPositionChange. Type: (position: number) => void. Default: NA. children*. Type: ReactNode[]. Default: NA. justify. Type: start | center | end. Default: \"start\". children. Type: ReactNode. Default: NA. isActive. Type: boolean. Default: false. icon. Type: ReactNode | ((isOpen: boolean | undefined) => ReactNode). Default: NA. isSelected. Type: boolean. Default: false. defaultSelected. Type: boolean. Default: false. srOnlyText. Type: string. Default: \"open/close navigation menu\". onChange. Type: (isOpen: boolean) => void. Default: NA. children*. Type: ReactNode[]. Default: NA. portalContainer. Type: HTMLElement. Default: \"document.body\". motionProps. Type: MotionProps. Default: NA. children. Type: ReactNode. Default: NA. isActive. Type: boolean. Default: false.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/navbar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"navbar — navbar","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react) library(shiny.router) #> shiny.router from version > 0.2.3 introduced major #>   changes to the API. Old API is still working but has been marked as deprecated. #>   Please check the docs, or examples to learn more: https://github.com/Appsilon/shiny.router  sections <- c(\"main\", \"other\")  layout <- function(..., content) {   tags$div(     css = JS(\"       {         maxW: '100%',         boxSizing: 'border-box',       }\"     ),     ..., # Navbar     # Content     tags$div(       css = JS(         \"{           boxSizing: 'border-box',           px: '$12',           mt: '$8',           '@xsMax': {px: '$10'}         }\"       ),       content     )   ) }  # TO DO: create wrapper for end-user to simplify all this mess. create_navbar <- function(id) {    input <- get(\"input\", envir = parent.frame())    nav_links <- lapply(seq_along(sections), function(i) {     # Li elements     link(       inputId = sprintf(\"link_%s\", i),       href = route_link(sections[[i]]),       key = i,       value = i,       parent = sprintf(\"navbar_%s\", sections[[i]]),       isActive = if (is.null(input[[sprintf(\"navbar_%s\", id)]])) {         if (i == 1) TRUE else FALSE       } else {         if (input[[sprintf(\"navbar_%s\", id)]] == i) TRUE else FALSE       },       sprintf(\"Link to %s\", sections[[i]])     )   })    nav <- navbar(     id = sprintf(\"navbar_%s\", id),     maxWidth = \"lg\",     variant = \"floating\",     isBordered = TRUE,     navbar_brand(p(b = TRUE, \"Brand\", color = \"inherit\", hideIn = \"xs\")),     # Ul element     navbar_content(       variant = \"highlight\",       activeColor = \"success\",       nav_links,       navbar_item(         action_button(           inputId = sprintf(\"navbar_button-%s\", id),           \"Click me\",           auto = TRUE,           flat = TRUE         )       )     )   )    if (is.null(input[[sprintf(\"navbar_%s\", id)]])) {     tagList(       tags$script(         sprintf(\"Shiny.setInputValue('navbar_%s', 0)\", id)       ),       nav     )   } else {     nav   } }  page <- function(id, content) {   layout(     reactOutput(sprintf(\"nav_%s\", id)),     content = content   ) }  home <- page(   id = \"main\",   card(     numeric_input(       inputId = \"obs\",       label = \"Number of observations:\",       value = 500     ),     plotOutput(\"distPlot\")   ) ) other <- page(   id = \"other\",   tableOutput('table') )  ui <- nextui_page(   router_ui(     route(\"main\", home),     route(\"other\", other)   ) )  server <- function(input, output, session) {   observe(print(input$navbar))   output$nav_main <- renderReact({     create_navbar(\"main\")   })    output$nav_other <- renderReact({     create_navbar(\"other\")   })    output$distPlot <- renderPlot({     hist(rnorm(input$obs))   })   output$table <- renderTable(iris)    router_server(\"main\") }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/nextui-defaults.html","id":null,"dir":"Reference","previous_headings":"","what":"Available sizes — sizes","title":"Available sizes — sizes","text":"Available sizes Available colors Available radiuses Available tabs variants Available select variants","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/nextui-defaults.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Available sizes — sizes","text":"","code":"sizes  colors  radiuses  tabs_variants  select_variants"},{"path":"https://rinterface.github.io/shinyNextUI/reference/nextui-defaults.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Available sizes — sizes","text":"object class character length 3. object class character length 6. object class character length 5. object class character length 4. object class character length 4.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/nextui_page.html","id":null,"dir":"Reference","previous_headings":"","what":"NextUI page wrapper — nextui_page","title":"NextUI page wrapper — nextui_page","text":"Suppressed Bootstrap dependency needed.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/nextui_page.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NextUI page wrapper — nextui_page","text":"","code":"nextui_page(..., dark_mode = FALSE, debug_react = FALSE)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/nextui_page.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NextUI page wrapper — nextui_page","text":"... UI elements. dark_mode Apply global dark mode. NULL, switch shown. debug_react Whether enable react debug mode. Default FALSE.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/nextui_page.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NextUI page wrapper — nextui_page","text":"Object can passed UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/pagination.html","id":null,"dir":"Reference","previous_headings":"","what":"pagination — pagination","title":"pagination — pagination","text":"Pagination component allows display active page navigate multiple pages.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/pagination.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"pagination — pagination","text":"","code":"pagination(inputId, ..., value = default_value)  update_pagination(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/pagination.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"pagination — pagination","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/pagination.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"pagination — pagination","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/pagination.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"pagination — pagination","text":"variant. Type: flat | bordered | light | faded. Default: \"flat\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: \"xl\". total. Type: number. Default: \"1\". dotsJump. Type: number. Default: \"5\". initialPage. Type: number. Default: \"1\". page. Type: number. Default: NA. siblings. Type: number. Default: \"1\". boundaries. Type: number. Default: \"1\". loop. Type: boolean. Default: false. isCompact. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. showShadow. Type: boolean. Default: false. showControls. Type: boolean. Default: false. disableCursorAnimation. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. renderItem. Type: PaginationItemProps. Default: NA. getItemAriaLabel. Type: (page: string) => string. Default: NA. classNames. Type: Partial<Record<'base' | 'wrapper' | 'prev' | 'next' | 'item' | 'cursor' | 'forwardIcon' | 'ellipsis' | 'chevronNext', string>>. Default: NA. onChange. Type: (page: number) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/pagination.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"pagination — pagination","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react) library(thematic)  thematic_shiny()  max <- 10 cards <- lapply(seq_len(max), function(i) {   tagList(     spacer(y = 2),     card(       id = sprintf(\"mycard-%s\", i),       card_header(sprintf(\"Card %s\", i)),       card_body(         sprintf(\"Card content %s\", i),         slider_input(           sprintf(\"obs-%s\", i),           \"Obs\",           minValue = 0,           maxValue = 1000,           value = 500         ),         plotOutput(sprintf(\"distPlot-%s\", i))       )     )   ) })  ui <- nextui_page(   pagination(     inputId = \"pagination\",     loop = TRUE,     size = \"lg\",     variant = \"bordered\",     showControls = TRUE,     page = 1,     total = max   ) )  server <- function(input, output, session) {   history <- reactiveVal(NULL)    # Dynamically insert cards with the pagination.   observeEvent(input$pagination, {     if (!is.null(history()))       removeUI(sprintf(\"#mycard-%s\", history()), multiple = TRUE)     insertUI(       selector = \"#pagination\",       where = \"afterEnd\",       ui = cards[[input$pagination]]     )     history(input$pagination)      output[[sprintf(\"distPlot-%s\", history())]] <- renderPlot({       req(input[[sprintf(\"obs-%s\", history())]])       hist(         rnorm(input[[sprintf(\"obs-%s\", history())]]),         main = sprintf(\"Super plot %s\", history())       )     })   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/poke_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Pokemon API data — poke_data","title":"Pokemon API data — poke_data","text":"Extract data 151 first Pokemons.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/poke_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pokemon API data — poke_data","text":"","code":"poke_data"},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/poke_data.html","id":"poke-data","dir":"Reference","previous_headings":"","what":"poke_data","title":"Pokemon API data — poke_data","text":"nested list 151 entries. sublist contains: name Char: Pokemon name. description Char: Pokemon description. shape Char: Pokemon shape. sprites List: Front back sprites (images). habitat Char: Pokemon habitat.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/poke_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Pokemon API data — poke_data","text":"https://pokeapi.co/docs/v2","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/poke_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pokemon API data — poke_data","text":"look inst/app-doc/data-doc.html get interactive overview.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/popover.html","id":null,"dir":"Reference","previous_headings":"","what":"popover — popover","title":"popover — popover","text":"Popover non-modal dialog floats around disclosure. commonly used displaying additional rich content top something.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/popover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"popover — popover","text":"","code":"popover(...)  popover_trigger(...)  popover_content(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/popover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"popover — popover","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/popover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"popover — popover","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/popover.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"popover — popover","text":"children*. Type: ReactNode[]. Default: NA. size. Type: sm | md | lg. Default: \"md\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". radius. Type: none | sm | md | lg | full. Default: \"lg\". shadow. Type: none | sm | md | lg. Default: \"lg\". backdrop. Type: transparent | opaque | blur. Default: \"transparent\". placement. Type: PopoverPlacement. Default: \"bottom\". state. Type: OverlayTriggerState. Default: NA. isOpen. Type: boolean. Default: NA. defaultOpen. Type: boolean. Default: NA. offset. Type: number. Default: \"7\". containerPadding. Type: number. Default: \"12\". crossOffset. Type: number. Default: \"0\". triggerType. Type: dialog | menu | listbox | tree | grid. Default: \"dialog\". showArrow. Type: boolean. Default: false. shouldFlip. Type: boolean. Default: true. triggerScaleOnOpen. Type: boolean. Default: true. shouldBlockScroll. Type: boolean. Default: false. shouldCloseOnScroll. Type: boolean. Default: false. isKeyboardDismissDisabled. Type: boolean. Default: false. shouldCloseOnBlur. Type: boolean. Default: false. motionProps. Type: MotionProps. Default: NA. portalContainer. Type: HTMLElement. Default: \"document.body\". disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'base' | 'trigger' | 'backdrop' | 'content', string>>. Default: NA. onOpenChange. Type: (isOpen: boolean) => void. Default: NA. shouldCloseOnInteractOutside. Type: (e: HTMLElement) => void. Default: NA. onClose. Type: () => void. Default: NA. children*. Type: ReactNode. Default: NA. children. Type: ReactNode. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/popover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"popover — popover","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   dark_mode = TRUE,   div(     className = \"flex align-items-start\",     popover(       showArrow = TRUE,       placement = \"right\",       backdrop = \"blur\",       popover_trigger(button(\"Click me!\", color = \"primary\")),       popover_content(         div(           className = \"px-1 py-2\",           \"This is the content of the popover.\"         )       )     )   ) )  server <- function(input, output, session) { }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/progress.html","id":null,"dir":"Reference","previous_headings":"","what":"progress — progress","title":"progress — progress","text":"Progress component allows view progress activity.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/progress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"progress — progress","text":"","code":"progress(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/progress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"progress — progress","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/progress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"progress — progress","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/progress.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"progress — progress","text":"label. Type: ReactNode. Default: NA. size. Type: sm | md | lg. Default: \"md\". color. Type: default | primary | secondary | success | warning | danger. Default: \"primary\". radius. Type: none | sm | md | lg | full. Default: \"full\". value. Type: number. Default: NA. valueLabel. Type: ReactNode. Default: NA. minValue. Type: number. Default: \"0\". maxValue. Type: number. Default: \"100\". formatOptions. Type: Intl.NumberFormat. Default: \"style: 'percent'\". isIndeterminate. Type: boolean. Default: false. isStriped. Type: boolean. Default: false. showValueLabel. Type: boolean. Default: true. isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'base' | 'labelWrapper' | 'label' | 'track' | 'value' | 'indicator', string>>. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/progress.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"progress — progress","text":"","code":"library(shiny) library(shinyNextUI)  colors <- c(   \"default\",   \"primary\",   \"secondary\",   \"success\",   \"warning\",   \"danger\" )  bool_par <- c(rep(FALSE, 3), rep(TRUE, 2), FALSE)  progress_config <- data.frame(   label = c(rep(\"A label\", 3), rep(\"\", 3)),   show_value_label = c(rep(FALSE, 3), rep(TRUE, 3)),   size = c(\"sm\", \"sm\", rep(\"md\", 2), \"lg\", \"lg\"),   color = colors,   striped = bool_par,   radius = c(rep(\"none\", 2), \"sm\", \"md\", \"lg\", \"full\") )  progress_factory <- function(   label,   show_value_label,   size,   color,   striped,   radius ) {   progress(     label = label,     showValueLabel = show_value_label,     value = round(runif(1, 0, 100)),     size = size,     color = color,     isStriped = striped,     radius = radius   ) }  progresses <- purrr::pmap(progress_config, progress_factory)  ui <- nextui_page(   div(     class = \"grid gap-4 grid-cols-3 grid-rows-3 m-5\",     progresses   ) )  server <- function(input, output, session) { }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/radio.html","id":null,"dir":"Reference","previous_headings":"","what":"Radio input — radio_input","title":"Radio input — radio_input","text":"Radio input","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/radio.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Radio input — radio_input","text":"","code":"radio_input(inputId, ..., choices, selected = choices[1])  update_radio_input(   session = shiny::getDefaultReactiveDomain(),   inputId,   ...,   choices = NULL,   selected = NULL )"},{"path":"https://rinterface.github.io/shinyNextUI/reference/radio.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Radio input — radio_input","text":"inputId Unique input id. ... Props. choices Radio choices. selected Default selected value. session Shiny session.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/radio.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Radio input — radio_input","text":"radio input tag.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/radio.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Radio input — radio_input","text":"See https://nextui.org/docs/components/radio-group get list parameters pass ....","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/radio.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Radio input — radio_input","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   debug_react = TRUE,   div(     class = \"flex flex-col gap-1\",     spacer(y = 2),     select_input(       \"select\",       label = \"Tab to select:\",       value = JS(\"['sydney']\"),       disallowEmptySelection = TRUE,       select_item(key = \"buenos-aires\", value = \"buenos-aires\", \"Buenos Aires\"),       select_item(key = \"sydney\", value = \"sydney\", \"Sydney\")     ),     spacer(y = 2),     radio_input(       inputId = \"radio\",       label = \"Radios\",       description = \"Radios are fun.\",       orientation = \"horizontal\",       choices = c(         \"buenos-aires\" = \"Buenos Aires\",         \"sydney\" = \"Sydney\"       )     ),     textOutput(\"radio_val\")   ) )  server <- function(input, output, session) {   observeEvent(input$select, {     update_radio_input(session, \"radio\", selected = input$select)   })   output$radio_val <- renderText(input$radio) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/run_example.html","id":null,"dir":"Reference","previous_headings":"","what":"Run shinyNextUI example — run_example","title":"Run shinyNextUI example — run_example","text":"Run shinyNextUI example","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/run_example.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run shinyNextUI example — run_example","text":"","code":"run_example(name)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/run_example.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run shinyNextUI example — run_example","text":"name Use get_examples get available examples.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/run_example.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run shinyNextUI example — run_example","text":"Runs Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/select.html","id":null,"dir":"Reference","previous_headings":"","what":"select — select","title":"select — select","text":"select displays collapsible list options allows user select one .","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/select.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"select — select","text":"","code":"select_input(inputId, ..., value = default_value)  select_section(...)  select_item(...)  update_select_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/select.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"select — select","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/select.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"select — select","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/select.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"select — select","text":"Select Props children*. Type: ReactNode[]. Default: NA. items. Type: Iterable<T>. Default: NA. selectionMode. Type: single | multiple. Default: NA. selectedKeys. Type: | Iterable<React.Key>. Default: NA. disabledKeys. Type: Iterable<React.Key>. Default: NA. defaultSelectedKeys. Type: | Iterable<React.Key>. Default: NA. variant. Type: flat | bordered | faded | underlined. Default: \"flat\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: NA. placeholder. Type: string. Default: \"Select option\". labelPlacement. Type: inside | outside | outside-left. Default: \"inside\". label. Type: ReactNode. Default: NA. description. Type: ReactNode. Default: NA. errorMessage. Type: ReactNode | ((v: ValidationResult) => ReactNode). Default: NA. startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. selectorIcon. Type: ReactNode. Default: NA. scrollRef. Type: React.RefObject<HTMLElement>. Default: NA. spinnerRef. Type: React.RefObject<HTMLElement>. Default: NA. maxListboxHeight. Type: number. Default: \"256\". itemHeight. Type: number. Default: \"32\". isVirtualized. Type: boolean. Default: \"undefined\". fullWidth. Type: boolean. Default: true. isOpen. Type: boolean. Default: NA. defaultOpen. Type: boolean. Default: NA. isRequired. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. isMultiline. Type: boolean. Default: false. isInvalid. Type: boolean. Default: false. validationState. Type: valid | invalid. Default: NA. showScrollIndicators. Type: boolean. Default: true. autoFocus. Type: boolean. Default: false. disallowEmptySelection. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: true. disableSelectorIconRotation. Type: boolean. Default: false. hideEmptyContent. Type: boolean. Default: false. popoverProps. Type: PopoverProps. Default: NA. listboxProps. Type: ListboxProps. Default: NA. scrollShadowProps. Type: ScrollShadowProps. Default: NA. classNames. Type: Partial<Record<\"base\"｜ \"label\"｜ \"trigger\"｜ \"mainWrapper\" ｜ \"innerWrapper\"｜ \"selectorIcon\" ｜ \"value\" ｜ \"listboxWrapper\"｜ \"listbox\" ｜ \"popoverContent\" ｜ \"helperWrapper\" ｜ \"description\" ｜ \"errorMessage\", string>>. Default: NA. 2. Select Events onClose. Type: () => void. Default: NA. onOpenChange. Type: (isOpen: boolean) => void. Default: NA. onSelectionChange. Type: (keys: \"\" | Set<React.Key> & {anchorKey?: string; currentKey?: string}) => void. Default: NA. onChange. Type: React.ChangeEvent<HTMLSelectElement>. Default: NA. renderValue. Type: RenderValueFunction. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/select.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"select — select","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  animals <- list(   list(     label = \"Bulbasaur\",     value = \"bulbasaur\",     description = \"Blabla\",     avatar = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/1.png\"   ),   list(     label = \"Pikachu\",     value = \"pikachu\",     description = \"Electric mouse\",     avatar = \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png\"   ) )  select_items <- lapply(animals, function(animal) {   select_item(     key = animal[[\"value\"]],     value = animal[[\"value\"]],     startContent = avatar(src = animal[[\"avatar\"]]),     animal[[\"label\"]]   ) })  label_placements <- c(   \"inside\",   \"outside\",   \"outside-left\" )  ui <- nextui_page(   debug_react = TRUE,   p(class = \"font-extrabold text-2xl uppercase\", \"Basic select\"),   action_button(\"update\", \"Update to bulbasaur?\"),   spacer(y = 2),   action_button(\"toggle\", \"Open select\"),   spacer(y = 2),   select_input(     inputId = \"select\",     label = \"Select an pokemon\",     value = JS(\"['pikachu']\"),     selectionMode = \"multiple\",     description = \"This is a select input. You can select multiple values.\",     select_items   ),   textOutput(\"select_val\"),   spacer(y = 5),   divider(),   p(class = \"font-extrabold text-2xl uppercase\", \"Variants\"),   lapply(select_variants, function(variant) {     tagList(       select_input(         inputId = sprintf(\"select-%s\", variant),         label = \"Select a pokemon\",         variant = variant,         value = JS(\"['pikachu']\"),         description = sprintf(\"This is a select input with %s variant style\", variant),         select_items       ),       spacer(y = 2)     )   }),   spacer(y = 5),   divider(),   p(     class = \"font-extrabold text-2xl uppercase\",     \"Label placement and validation (no value specified)\"   ),   lapply(label_placements, function(placement) {     tagList(       select_input(         inputId = sprintf(\"select-%s\", placement),         label = \"Select a pokemon\",         labelPlacement = placement,         description = sprintf(\"This is a select input with %s label placement\", placement),         select_items       ),       spacer(y = 10)     )   }),   spacer(y = 5),   divider(),   p(     class = \"font-extrabold text-2xl uppercase\",     \"Custom render value\"   ),   select_input(     inputId = \"customselect\",     labelPlacement = \"outside-left\",     label = \"Pokemon\",     description = \"This is a select input. You can select multiple values.\",     items = jsonlite::toJSON(animals),     select_items   ) )  server <- function(input, output, session) {   opened <- reactiveVal(FALSE)   observeEvent(input$update, {     update_select_input(session, \"select\", value = JS(\"['bulbasaur']\"))   })   observeEvent(input$toggle, {     opened(!opened())     update_select_input(session, \"select\", isOpen = opened())   })   output$select_val <- renderText(input$select) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/shinyInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Documentation template for components with input wrappers — shinyInput","title":"Documentation template for components with input wrappers — shinyInput","text":"Documentation template components input wrappers","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/shinyInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Documentation template for components with input wrappers — shinyInput","text":"inputId ID component. value Starting value. session Object passed session argument Shiny server. ... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/shinyInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Documentation template for components with input wrappers — shinyInput","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/skeleton.html","id":null,"dir":"Reference","previous_headings":"","what":"skeleton — skeleton","title":"skeleton — skeleton","text":"Skeleton placeholder show loading state expected shape component.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/skeleton.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"skeleton — skeleton","text":"","code":"skeleton(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/skeleton.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"skeleton — skeleton","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/skeleton.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"skeleton — skeleton","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/skeleton.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"skeleton — skeleton","text":"children. Type: ReactNode. Default: NA. isLoaded. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\" | \"content\", string>>. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/skeleton.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"skeleton — skeleton","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   debug_react = TRUE,   reactOutput(\"skeleton_card\") )  server <- function(input, output, session) {    is_loaded <- reactiveVal(FALSE)   observeEvent(req(!is_loaded()), {     Sys.sleep(4)     is_loaded(TRUE)   })    output$skeleton_card <- renderReact({     card(       card_header(         skeleton(           isLoaded = is_loaded(),           user(             name = \"Jane Doe\",             description = \"Product Designer\",             avatarProps = JS(\"{             src: 'https://i.pravatar.cc/150?u=a04258114e29026702d'           }\")           )         )       ),       card_body(skeleton(\"Hello World\", isLoaded = is_loaded())),       card_footer(skeleton(\"Footer\", isLoaded = is_loaded()))     )   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/slider.html","id":null,"dir":"Reference","previous_headings":"","what":"slider — slider","title":"slider — slider","text":"slider allows user select one values within range.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/slider.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"slider — slider","text":"","code":"slider_input(inputId, ..., value = default_value)  update_slider_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/slider.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"slider — slider","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/slider.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"slider — slider","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/slider.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"slider — slider","text":"label. Type: ReactNode. Default: NA. name. Type: string. Default: NA. size. Type: sm | md | lg. Default: \"md\". color. Type: foreground | primary | secondary | success | warning | danger. Default: \"primary\". radius. Type: none | sm | md | lg | full. Default: \"full\". step. Type: number. Default: \"1\". value. Type: number. Default: NA. defaultValue. Type: number. Default: NA. minValue. Type: number. Default: \"0\". maxValue. Type: number. Default: \"100\". orientation. Type: horizontal | vertical. Default: \"horizontal\". fillOffset. Type: number. Default: NA. showSteps. Type: boolean. Default: false. showTooltip. Type: boolean. Default: false. marks. Type: SliderStepMarks. Default: NA. startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. formatOptions. Type: Intl.NumberFormat. Default: NA. tooltipValueFormatOptions. Type: Intl.NumberFormat. Default: NA. tooltipProps. Type: TooltipProps. Default: NA. showOutline. Type: boolean. Default: false. hideValue. Type: boolean. Default: false. hideThumb. Type: boolean. Default: false. disableThumbScale. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. getValue. Type: (value: SliderValue) => string. Default: NA. renderLabel. Type: (props: DOMAttributes<HTMLLabelElement>) => ReactNode. Default: NA. renderValue. Type: (props: DOMAttributes<HTMLOutputElement>) => ReactNode. Default: NA. renderThumb. Type: (props: DOMAttributes<HTMLDivElement> & {index?: number}) => ReactNode. Default: NA. onChange. Type: (value: SliderValue) => void. Default: NA. onChangeEnd. Type: (value: SliderValue) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/slider.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"slider — slider","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   debug_react = TRUE,   action_button(\"update\", \"Update slider 1\"),   slider_input(     \"slider\",     label = \"My slider\",     showTooltip = TRUE,     radius = \"none\",     step = 1,     maxValue = 10,     minValue = 0,     value = 5,     className = \"max-w-md\",     showSteps = TRUE,     color = \"foreground\",     size = \"sm\",     marks = JS(       \"       [         {           value: 2,           label: 'First mark',         },         {           value: 5,           label: 'Second mark',         },         {           value: 8,           label: 'Third mark',         },       ]     \"     )   ),   spacer(y = 10),   slider_input(     \"slider2\",     radius = \"lg\",     label = \"Color offset\",     size = \"sm\",     showTooltip = TRUE,     color = \"warning\",     maxValue = 5,     minValue = -5,     fillOffset = 0,     value = 1,     formatOptions = JS(\"{signDisplay: 'always'}\")   ),   spacer(y = 10),   slider_input(     \"slider3\",     label = \"Outline\",     color = \"foreground\",     showOutline = TRUE,     minValue = 0,     maxValue = 10,     value = 5   ),   spacer(y = 10),   slider_input(     \"slider4\",     label = \"With start and end content\",     minValue = 0,     maxValue = 10,     value = 5,     startContent = icon(\"volume-xmark\"),     endContent = icon(\"volume-high\")   ),   spacer(y = 10),   slider_input(     \"slider5\",     color = \"success\",     step = 0.1,     label = \"Format value with getValue\",     getValue = JS(\"(val) => `${val} / 10`\"),     maxValue = 10,     minValue = 0,     value = 5   ),   spacer(y = 10),   slider_input(     \"range\",     label = \"Range\",     color = \"danger\",     minValue = 0,     maxValue = 10,     value = c(1, 4)   ),   spacer(y = 10),   div(     class = \"flex flex-row  max-w-md h-[348px] gap-6 w-full\",     slider_input(       \"slider4\",       label = \"Vertical\",       size = \"sm\",       orientation = \"vertical\",       minValue = 0,       maxValue = 10,       value = 5,       startContent = icon(\"volume-high\"),       endContent = icon(\"volume-xmark\")     )   ) )  server <- function(input, output, session) {   observeEvent(input$update, {     update_slider_input(session, inputId = \"slider\", value = 10)   })    observeEvent(input$slider, {     print(class(input$slider))     print(sprintf(\"Slider is: %s\", input$slider))   })   observeEvent(input$range, {     print(input$range)   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/snippet.html","id":null,"dir":"Reference","previous_headings":"","what":"snippet — snippet","title":"snippet — snippet","text":"Snippet component can used display inline multiline code snippets.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/snippet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"snippet — snippet","text":"","code":"snippet(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/snippet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"snippet — snippet","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/snippet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"snippet — snippet","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/snippet.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"snippet — snippet","text":"children. Type: ReactNode | ReactNode[]. Default: NA. size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg. Default: \"lg\". symbol. Type: string | ReactNode. Default: \"$\". timeout. Type: number. Default: \"2000\". codeString. Type: string. Default: NA. tooltipProps. Type: TooltipProps. Default: NA. copyIcon. Type: ReactNode. Default: NA. checkIcon. Type: ReactNode. Default: NA. disableTooltip. Type: boolean. Default: false. disableCopy. Type: boolean. Default: false. hideCopyButton. Type: boolean. Default: false. hideSymbol. Type: boolean. Default: false. copyButtonProps. Type: ButtonProps. Default: NA. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<'base' | 'content' | 'pre' | 'symbol' | 'copyButton' | 'checkIcon', string>>. Default: NA. onCopy. Type: (value: string | string[]) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/snippet.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"snippet — snippet","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   debug_react = TRUE,   snippet(\"npm install @nextui-org/react\", variant = \"bordered\"),   spacer(y = 2),   snippet(\"you can't copy me\", hideCopyButton = TRUE),   spacer(y = 2),   snippet(     color = \"secondary\",     variant = \"flat\",     span(\"npm install @nextui-org/react\"),     span(\"yarn add @nextui-org/react\")   ) )  server <- function(input, output, session) {  }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/spacer.html","id":null,"dir":"Reference","previous_headings":"","what":"spacer — spacer","title":"spacer — spacer","text":"Spacer component used add space components.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/spacer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"spacer — spacer","text":"","code":"spacer(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/spacer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"spacer — spacer","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/spacer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"spacer — spacer","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/spacer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"spacer — spacer","text":"x. Type: Space. Default: \"1\". y. Type: Space. Default: \"1\".","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/spacer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"spacer — spacer","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   card(card_body(\"Card 1\")),   spacer(y = 10),   card(card_body(\"Card 2\")),   spacer(y = 2),   card(card_body(\"Card 3\")),   spacer(y = 10),   div(     class = \"flex\",     card(card_body(\"Card 4\")),     spacer(x = 5),     card(card_body(\"Card 5\")),     spacer(x = 1),     card(card_body(\"Card 6\"))   ) )  server <- function(input, output, session) {}  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/switch.html","id":null,"dir":"Reference","previous_headings":"","what":"switch — switch","title":"switch — switch","text":"Switch component used alternative checked checked states.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/switch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"switch — switch","text":"","code":"switch_input(inputId, ..., value = default_value)  update_switch_input(session = shiny::getDefaultReactiveDomain(), inputId, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/switch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"switch — switch","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/switch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"switch — switch","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/switch.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"switch — switch","text":"children. Type: ReactNode. Default: NA. value. Type: string. Default: NA. name. Type: string. Default: NA. size. Type: sm | md | lg. Default: \"md\". color. Type: default | primary | secondary | success | warning | danger. Default: \"primary\". thumbIcon. Type: ThumbIconProps. Default: NA. startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. isSelected. Type: boolean. Default: NA. defaultSelected. Type: boolean. Default: NA. isReadOnly. Type: boolean. Default: NA. isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\"｜ \"wrapper\"｜ \"thumb\"｜ \"label\" ｜ \"startContent\" ｜ \"endContent\" ｜ \"thumbIcon\" , string>>. Default: NA. onChange. Type: React.ChangeEvent<HTMLInputElement>. Default: NA. onValueChange. Type: (isSelected: boolean) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/switch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"switch — switch","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  base_style <- paste(   \"inline-flex flex-row-reverse w-full max-w-md bg-content1 hover:bg-content2\",   \"items-center justify-between cursor-pointer rounded-lg gap-2 p-4 border-2\",   \"border-transparent data-[selected=true]:border-primary\" )  thumb_style <- paste(   \"w-6 h-6 border-2 shadow-lg group-data-[hover=true]:border-primary\",   \"group-data-[selected=true]:ml-6 group-data-[pressed=true]:w-7\",   \"group-data-[selected]:group-data-[pressed]:ml-4\" )  ui <- nextui_page(   div(     class = \"flex flex-col\",     action_button(\"update\", \"Toggle switch\"),     spacer(y = 2),     p(\"Basic\"),     switch_input(       inputId = \"switch\",       value = TRUE,       size = \"xs\"     ),     textOutput(\"switch_val\"),     spacer(y = 5),     p(\"Custom style\"),     spacer(y = 2),     switch_input(       \"custom_switch\",       classNames = JS(         sprintf(           \"{           base: '%s',           wrapper: 'p-0 h-4 overflow-visible',           thumb: '%s'         }\",           base_style,           thumb_style         )       ),       div(         className = \"flex flex-col gap-1\",         p(className = \"text-medium\", \"Enable early acces\"),         p(           className = \"text-tiny text-default-400\",           \"Get access to new features before they are released.\"         )       )     )   ) )  server <- function(input, output, session) {   output$switch_val <- renderText(input$switch)   observeEvent(input$update, {     update_switch_input(session, \"switch\", value = !input$switch)   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/table.html","id":null,"dir":"Reference","previous_headings":"","what":"Table widget — .table","title":"Table widget — .table","text":"Table widget","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/table.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table widget — .table","text":"","code":".table(...)  table_header(...)  table_body(...)  table_col(...)  table_row(...)  table_cell(...)  table(data = NULL, ...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/table.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Table widget — .table","text":"... Options. data Data render.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/table.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table widget — .table","text":"See https://nextui.org/docs/components/table get list parameters pass ....","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/table.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Table widget — .table","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  # Data can also be a list of lists. dt <- list(   # Row 1   list(     col1 = avatar(name = \"pouet\"),     col2 = chip(\"Chip\", color = \"success\", variant = \"flat\"),     col3 = circular_progress(       value = 100,       showValueLabel = TRUE,       strokeWidth = 4,       size = \"lg\",       minValue = 0,       maxValue = 150,       valueLabel = 100,       color = \"warning\"     )   )   # Row 2 ... )  ui <- nextui_page(   dark_mode = TRUE,   spacer(y = 5),   p(class = \"font-extrabold text-2xl uppercase my-2\", \"No data\"),   spacer(y = 2),   table(iris[0, ], hideHeader = TRUE),   spacer(y = 5),   p(class = \"font-extrabold text-2xl uppercase my-2\", \"Pass data as a list\"),   table(dt),   spacer(y = 5),   p(class = \"font-extrabold text-2xl uppercase my-2\", \"Single selection table\"),   spacer(y = 2),   table(     iris[1:5, ],     removeWrapper = TRUE,     isStriped = TRUE,     color = \"primary\",     selectionMode = \"single\",     defaultSelectedKeys = JS(\"['2']\")   ),   spacer(y = 5),   p(class = \"font-extrabold text-2xl uppercase my-2\", \"Multiple selection table\"),   spacer(y = 2),   table(     iris[1:5, ],     color = \"primary\",     selectionMode = \"multiple\",     defaultSelectedKeys = JS(\"['1', '2']\"),     disabledKeys = JS(\"['3']\")   ),   spacer(y = 5),   p(class = \"font-extrabold text-2xl uppercase my-2\", \"Top/Bottom content\"),   spacer(y = 2),   table(     iris[1:5, ],     isCompact = TRUE,     topContent = div(       class = \"flex justify-between\",       p(\"Top content ...\"),       chip(\"My chip\"),       badge(button(\"CLick me\"), color = \"success\", placement = \"top-right\", content = \"New\")     ),     bottomContent = div(       class = \"flex justify-between\",       p(\"Bottom content ...\"),       link(         href = \"https://nextui.org/docs/components/table\",         target = \"_blank\",         \"To the doc.\"       )     )   ) )  server <- function(input, output, session) {}  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/tabs.html","id":null,"dir":"Reference","previous_headings":"","what":"tabs — tabs","title":"tabs — tabs","text":"Tabs organize content multiple sections allow users navigate .","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/tabs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tabs — tabs","text":"","code":"tabs(inputId, ..., value = default_value)  update_tabs(session = shiny::getDefaultReactiveDomain(), inputId, ...)  tab(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/tabs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tabs — tabs","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/tabs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tabs — tabs","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/tabs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tabs — tabs","text":"children*. Type: ReactNode | ((item: T) => ReactElement). Default: NA. variant. Type: solid | bordered | light | underlined. Default: \"solid\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: NA. fullWidth. Type: boolean. Default: false. items. Type: Iterable<T>. Default: NA. disabledKeys. Type: React.Key[]. Default: NA. selectedKey. Type: React.Key. Default: NA. defaultSelectedKey. Type: React.Key. Default: NA. shouldSelectOnPressUp. Type: boolean. Default: true. keyboardActivation. Type: automatic | manual. Default: \"automatic\". motionProps. Type: MotionProps. Default: NA. disableCursorAnimation. Type: boolean. Default: false. isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\"｜ \"tabList\"｜ \"tab\"｜ \"tabContent\"｜ \"cursor\" ｜ \"panel\" ｜ \"tabWrapper\", string>>. Default: NA. placement. Type: top | bottom | start | end. Default: \"top\". isVertical. Type: boolean. Default: false. destroyInactiveTabPanel. Type: boolean. Default: true. onSelectionChange. Type: (key: React.Key) => . Default: NA. tabRef. Type: RefObject<HTMLButtonElement>. Default: NA. children*. Type: ReactNode. Default: NA. title. Type: ReactNode. Default: NA. titleValue. Type: string. Default: NA. href. Type: string. Default: NA. target. Type: HTMLAttributeAnchorTarget. Default: NA. rel. Type: string. Default: NA. download. Type: boolean | string. Default: NA. ping. Type: string. Default: NA. referrerPolicy. Type: HTMLAttributeReferrerPolicy. Default: NA. shouldSelectOnPressUp. Type: boolean. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/tabs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tabs — tabs","text":"","code":"library(shiny) library(shinyNextUI)  items <- tagList(   tab(     key = 1,     title = div(       class = \"flex items-center gap-1\",       icon(\"home\"),       \"Tab 1\"     ),     card(       card_body(         \"Lorem ipsum dolor sit amet, consectetur adipiscing elit,           sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.           Ut enim ad minim veniam, quis nostrud exercitation ullamco           laboris nisi ut aliquip ex ea commodo consequat.\"       )     )   ),   tab(     key = 2,     title = \"Tab 2\",     card(       card_body(         \"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris           nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in           reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\"       )     )   ),   tab(     key = 3,     title = \"Tab 3\",     card(       card_body(         \"Excepteur sint occaecat cupidatat non proident, sunt in culpa qui           officia deserunt mollit anim id est laborum.\"       )     )   ) )  ui <- nextui_page(   debug_react = TRUE,   p(class = \"font-extrabold text-2xl uppercase\", \"Simple tabs\"),   tabs(     inputId = \"tabs1\",     disabledKeys = \"2\",     items   ),   spacer(y = 2),   select_input(     \"select\",     label = \"Tab to select:\",     value = \"1\",     select_item(key = 1, value = \"1\", \"1\"),     select_item(key = 3, value = \"3\", \"3\")   ),   p(\"Selected tab is:\", textOutput(\"active_tab\", inline = TRUE)),   spacer(y = 5),   divider(),   p(class = \"font-extrabold text-2xl uppercase\", \"Tab size\"),   lapply(sizes, function(size) {     tagList(       p(class = \"\", sprintf(\"Size: %s\", size)),       tabs(         inputId = sprintf(\"tabs-%s\", size),         size = size,         items       )     )   }),   spacer(y = 5),   divider(),   p(class = \"font-extrabold text-2xl uppercase\", \"Tab variants\"),   lapply(tabs_variants, function(variant) {     tagList(       p(sprintf(\"Variant: %s\", variant)),       tabs(         inputId = sprintf(\"tabs-%s\", variant),         variant = variant,         items       )     )   }),   spacer(y = 5),   divider(),   p(class = \"font-extrabold text-2xl uppercase\", \"Tab color\"),   lapply(colors, function(color) {     tagList(       p(class = \"\", sprintf(\"Color: %s\", color)),       tabs(         inputId = sprintf(\"tabs-%s\", color),         variant = \"bordered\",         color = color,         items       )     )   }) )  server <- function(input, output, session) {   output$active_tab <- renderText(input$tabs1)   observeEvent(input$select, {     update_tabs(session, inputId = \"tabs1\", value = input$select)   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/textarea.html","id":null,"dir":"Reference","previous_headings":"","what":"textarea — textarea","title":"textarea — textarea","text":"Textarea component multi-line Input allows write large texts.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/textarea.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"textarea — textarea","text":"","code":"textarea_input(inputId, ..., value = default_value)  update_textarea_input(   session = shiny::getDefaultReactiveDomain(),   inputId,   ... )"},{"path":"https://rinterface.github.io/shinyNextUI/reference/textarea.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"textarea — textarea","text":"inputId ID component. ... Props pass component. allowed props listed Details section. value Starting value. session Object passed session argument Shiny server.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/textarea.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"textarea — textarea","text":"Object shiny.tag class suitable use UI Shiny app. update functions return nothing (called side effects).","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/textarea.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"textarea — textarea","text":"children. Type: ReactNode. Default: NA. minRows. Type: number. Default: \"3\". maxRows. Type: number. Default: \"8\". cacheMeasurements. Type: boolean. Default: false. variant. Type: flat | bordered | faded | underlined. Default: \"flat\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". size. Type: sm | md | lg. Default: \"md\". radius. Type: none | sm | md | lg | full. Default: NA. label. Type: ReactNode. Default: NA. value. Type: string. Default: NA. defaultValue. Type: string. Default: NA. placeholder. Type: string. Default: NA. startContent. Type: ReactNode. Default: NA. endContent. Type: ReactNode. Default: NA. description. Type: ReactNode. Default: NA. errorMessage. Type: ReactNode | ((v: ValidationResult) => ReactNode). Default: NA. validate. Type: (value: string) => ValidationError | true | null | undefined. Default: NA. validationBehavior. Type: native | aria. Default: \"native\". labelPlacement. Type: inside | outside | outside-left. Default: \"inside\". fullWidth. Type: boolean. Default: true. isRequired. Type: boolean. Default: false. isReadOnly. Type: boolean. Default: NA. isDisabled. Type: boolean. Default: false. isClearable. Type: boolean. Default: false. isInvalid. Type: boolean. Default: false. validationState. Type: valid | invalid. Default: NA. disableAutosize. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\" | \"label\" | \"inputWrapper\" | \"innerWrapper\" | \"input\" | \"description\" | \"errorMessage\", string>>. Default: NA. onChange. Type: React.ChangeEvent<HTMLInputElement>. Default: NA. onValueChange. Type: (value: string) => void. Default: NA. onClear. Type: () => void. Default: NA. onHeightChange. Type: (height: number, meta: { rowHeight: number }) => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/textarea.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"textarea — textarea","text":"","code":"library(shiny) library(shinyNextUI)  ui <- nextui_page(   div(     class = \"flex gap-5\",     action_button(\"update_text\", \"Update text\"),     textarea_input(       inputId = \"textarea\",       placeholder = \"Enter your amazing ideas.\",       label = \"Text area input\",       bordered = TRUE,       color = \"secondary\",       status = \"secondary\",       helperColor = \"error\",       helperText = \"Click on update text\"     )   ),   textOutput(\"textarea_val\") )  server <- function(input, output, session) {   output$textarea_val <- renderText(input$textarea)    observeEvent(input$update_text, {     update_textarea_input(       inputId = \"textarea\",       value = \"Updated value\"     )   }) }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/theme_switcher.html","id":null,"dir":"Reference","previous_headings":"","what":"Theme switcher helper — theme_switcher","title":"Theme switcher helper — theme_switcher","text":"Change light dark mode","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/theme_switcher.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theme switcher helper — theme_switcher","text":"","code":"theme_switcher(   value = TRUE,   label = \"Change theme\",   startContent = sun_icon(),   endContent = moon_icon() )"},{"path":"https://rinterface.github.io/shinyNextUI/reference/theme_switcher.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theme switcher helper — theme_switcher","text":"value Switch status. label Input label. startContent Icon selected. endContent Icon selected.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/theme_switcher.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theme switcher helper — theme_switcher","text":"","code":"if (interactive()) {   library(shiny)   library(shinyNextUI)   library(shiny.react)    ui <- nextui_page(     theme_switcher(),     card(card_body(\"My card\"))   )    server <- function(input, output, session) {     observe({       print(input$theme)     })   }    shinyApp(ui, server)  }"},{"path":"https://rinterface.github.io/shinyNextUI/reference/tooltip.html","id":null,"dir":"Reference","previous_headings":"","what":"tooltip — tooltip","title":"tooltip — tooltip","text":"Tooltips display brief, informative message appears user interacts element.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/tooltip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tooltip — tooltip","text":"","code":"tooltip(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/tooltip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tooltip — tooltip","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/tooltip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tooltip — tooltip","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/tooltip.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"tooltip — tooltip","text":"children*. Type: ReactNode[]. Default: NA. content. Type: ReactNode. Default: NA. size. Type: sm | md | lg. Default: \"md\". color. Type: default | primary | secondary | success | warning | danger. Default: \"default\". radius. Type: none | sm | md | lg | full. Default: \"md\". shadow. Type: none | sm | md | lg. Default: \"sm\". placement. Type: TooltipPlacement. Default: \"top\". delay. Type: number. Default: \"0\". closeDelay. Type: number. Default: \"500\". isOpen. Type: boolean. Default: NA. defaultOpen. Type: boolean. Default: NA. offset. Type: number. Default: \"7\". containerPadding. Type: number. Default: \"12\". crossOffset. Type: number. Default: \"0\". showArrow. Type: boolean. Default: false. shouldFlip. Type: boolean. Default: true. triggerScaleOnOpen. Type: boolean. Default: true. isKeyboardDismissDisabled. Type: boolean. Default: false. isDismissable. Type: boolean. Default: false. shouldCloseOnBlur. Type: boolean. Default: true. motionProps. Type: MotionProps. Default: NA. portalContainer. Type: HTMLElement. Default: \"document.body\". updatePositionDeps. Type: []. Default: \"[]\". isDisabled. Type: boolean. Default: false. disableAnimation. Type: boolean. Default: false. classNames. Type: Partial<Record<\"base\"｜\"content\", string>>. Default: NA. onOpenChange. Type: (isOpen: boolean) => void. Default: NA. shouldCloseOnInteractOutside. Type: (e: HTMLElement) => void. Default: NA. onClose. Type: () => void. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/tooltip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tooltip — tooltip","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   div(     className = \"flex align-items-start\",     tooltip(       content = \"A tooltip...\",       color = \"primary\",       showArrow = TRUE,       closeDelay = 0,       delay = 0,       button(\"Click me!\", color = \"warning\")     )   ) )  server <- function(input, output, session) { }  if (interactive() || is_testing()) shinyApp(ui, server)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/user.html","id":null,"dir":"Reference","previous_headings":"","what":"user — user","title":"user — user","text":"Display user information avatar name.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/user.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"user — user","text":"","code":"user(...)"},{"path":"https://rinterface.github.io/shinyNextUI/reference/user.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"user — user","text":"... Props pass component. allowed props listed Details section.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/user.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"user — user","text":"Object shiny.tag class suitable use UI Shiny app.","code":""},{"path":"https://rinterface.github.io/shinyNextUI/reference/user.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"user — user","text":"name. Type: string. Default: NA. description. Type: ReactNode. Default: NA. isFocusable. Type: boolean. Default: false. avatarProps. Type: AvatarProps. Default: NA. classNames. Type: Partial<Record<\"base\" | \"wrapper\" | \"name\" | \"description\", string>>. Default: NA.","code":""},{"path":[]},{"path":"https://rinterface.github.io/shinyNextUI/reference/user.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"user — user","text":"","code":"library(shiny) library(shinyNextUI) library(shiny.react)  ui <- nextui_page(   div(     class = \"grid gap-4 grid-cols-3 grid-rows-3 m-5\",     user(       name = \"Jane Doe\",       description = \"Product Designer\",       avatarProps = JS(\"{         src: 'https://i.pravatar.cc/150?u=a04258114e29026702d'       }\")     )   ) )  server <- function(input, output, session) {}  if (interactive() || is_testing()) shinyApp(ui, server)"}]
